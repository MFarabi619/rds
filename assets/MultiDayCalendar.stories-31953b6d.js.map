{"version":3,"file":"MultiDayCalendar.stories-31953b6d.js","sources":["../../src/components/MultiDayCalendar/MultiDayCalendar.styles.tsx","../../src/components/MultiDayCalendar/MultiDayCalendar.tsx"],"sourcesContent":["const styles = {\n  prevNextArrows: `flex items-center justify-center flex-none p-2 text-cu-black-800 hover:text-cu-red`,\n  calendarGrid: `grid grid-cols-7 gap-px mt-4 text-center`,\n}\nexport default styles\n","import { useState, useEffect } from 'react'\nimport { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/solid'\nimport { Button } from '../Button/Button'\nimport styles from './MultiDayCalendar.styles'\n\nimport {\n  add,\n  eachDayOfInterval,\n  endOfMonth,\n  format,\n  getDay,\n  isBefore,\n  isSameDay,\n  isSameMonth,\n  isToday,\n  parse,\n  parseISO,\n  startOfToday,\n} from 'date-fns'\n\nexport interface MultiDayCalendarProps {\n  events?: {\n    id: number\n    name: string\n    imageUrl: string\n    startDatetime: string\n    endDatetime: string\n  }[]\n  callback: (selectedDays: Date[]) => void\n  defaultDate?: string\n}\n\nconst classNames = (...classes: (string | boolean)[]) => {\n  return classes.filter(Boolean).join(' ')\n}\n\nexport const MultiDayCalendar = ({ events, callback, defaultDate }: MultiDayCalendarProps) => {\n  const today = startOfToday()\n\n  const [selectedDays, setSelectedDays] = useState<Date[]>(defaultDate ? [new Date(defaultDate)] : [])\n  const [currentMonth, setCurrentMonth] = useState(format(today, 'MMM-yyyy'))\n  const [showClear, setShowClear] = useState(false)\n  const firstDayCurrentMonth = parse(currentMonth, 'MMM-yyyy', new Date())\n  const colStartClasses = ['', 'col-start-2', 'col-start-3', 'col-start-4', 'col-start-5', 'col-start-6', 'col-start-7']\n  const days = eachDayOfInterval({\n    start: firstDayCurrentMonth,\n    end: endOfMonth(firstDayCurrentMonth),\n  })\n\n  const previousMonth = () => {\n    const firstDayNextMonth = add(firstDayCurrentMonth, { months: -1 })\n    setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'))\n  }\n\n  const nextMonth = () => {\n    const firstDayNextMonth = add(firstDayCurrentMonth, { months: 1 })\n    setCurrentMonth(format(firstDayNextMonth, 'MMM-yyyy'))\n  }\n\n  useEffect(() => {\n    callback(selectedDays)\n  }, [selectedDays, callback])\n\n  return (\n    <div className=\"cu-calendar not-prose\">\n      <div className=\"not-prose mb-6 flex items-center rounded-lg border border-cu-black-100 bg-white py-2\">\n        <button type=\"button\" onClick={previousMonth} className={`${styles.prevNextArrows}`}>\n          <span className=\"sr-only text-base\">Previous month</span>\n          <ChevronLeftIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n        </button>\n        <h2 className=\"flex-auto text-center text-base font-semibold text-cu-black-900\">\n          {format(firstDayCurrentMonth, 'MMMM yyyy')}\n        </h2>\n        <button onClick={nextMonth} type=\"button\" className={`${styles.prevNextArrows}`}>\n          <span className=\"sr-only text-base\">Next month</span>\n          <ChevronRightIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n        </button>\n      </div>\n\n      <div className={`${styles.calendarGrid} text-xs text-cu-black-600`}>\n        <div>S</div>\n        <div>M</div>\n        <div>T</div>\n        <div>W</div>\n        <div>T</div>\n        <div>F</div>\n        <div>S</div>\n      </div>\n      <div\n        className={`${styles.calendarGrid} isolate overflow-hidden rounded-lg border border-cu-black-100 bg-cu-black-50 text-sm`}\n      >\n        {days.map((day, dayIdx) => (\n          <div\n            key={day.toString()}\n            className={classNames(dayIdx === 0 && colStartClasses[getDay(day)], 'bg-white py-2')}\n          >\n            <button\n              type=\"button\"\n              disabled={isBefore(day, today)}\n              onClick={() => {\n                const selectedDaysISO = selectedDays.map((selectedDay) => selectedDay.toISOString())\n                if (selectedDaysISO.includes(day.toISOString())) {\n                  setSelectedDays(selectedDays.filter((selectedDay) => !isSameDay(selectedDay, day)))\n                } else {\n                  if (selectedDays.length >= 2) {\n                    if (day.getTime() < selectedDays[0].getTime()) {\n                      setSelectedDays([day, selectedDays[0]])\n                    } else if (day.getTime() > selectedDays[0].getTime()) {\n                      setSelectedDays([selectedDays[0], day])\n                    }\n                  } else {\n                    if (selectedDays.length === 0 || selectedDays[0].getTime() < day.getTime()) {\n                      setSelectedDays([...selectedDays, day])\n                    } else {\n                      setSelectedDays([day, ...selectedDays])\n                    }\n                  }\n                }\n                setShowClear(true)\n              }}\n              className={classNames(\n                selectedDays.some((selectedDay) => isSameDay(selectedDay, day)) && 'selected',\n                selectedDays.length === 2 &&\n                  day.getTime() >= selectedDays[0].getTime() &&\n                  day.getTime() <= selectedDays[1].getTime() &&\n                  'bg-cu-red text-white',\n                !selectedDays.some((selectedDay) => isSameDay(selectedDay, day)) && isToday(day) && 'text-cu-red',\n                !selectedDays.some((selectedDay) => isSameDay(selectedDay, day)) &&\n                  isSameMonth(day, firstDayCurrentMonth) &&\n                  'text-cu-black-900',\n                !selectedDays.some((selectedDay) => isSameDay(selectedDay, day)) &&\n                  !isSameMonth(day, firstDayCurrentMonth) &&\n                  'text-cu-black-400',\n                selectedDays.some((selectedDay) => isSameDay(selectedDay, day)) && isToday(day) && 'bg-cu-red',\n                selectedDays.some((selectedDay) => isSameDay(selectedDay, day)) &&\n                  !isToday(day) &&\n                  'bg-cu-red text-white',\n                !selectedDays.some((selectedDay) => isSameDay(selectedDay, day)) && 'hover:bg-cu-red hover:text-white',\n                isToday(day) || (selectedDays.some((selectedDay) => isSameDay(selectedDay, day)) && 'font-semibold'),\n                'mx-auto flex h-8 w-8 items-center justify-center rounded-full disabled:bg-cu-black-50 disabled:text-cu-black-900',\n              )}\n            >\n              <time dateTime={format(day, 'yyyy-MM-dd')}>{format(day, 'd')}</time>\n            </button>\n\n            <div className=\"mx-auto mt-1 h-1 w-1\">\n              {events?.some((event) => isSameDay(parseISO(event.startDatetime), day)) && (\n                <div className=\"h-1 w-1 rounded-full bg-sky-500\"></div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n      {showClear && (\n        <div className=\"mt-2\">\n          <Button\n            title=\"Clear Calendar\"\n            isCenter\n            isSmall\n            onClick={() => {\n              setSelectedDays([])\n              setShowClear(false)\n            }}\n          />\n        </div>\n      )}\n    </div>\n  )\n}\n"],"names":["styles","classNames","classes","MultiDayCalendar","events","callback","defaultDate","today","startOfToday","selectedDays","setSelectedDays","useState","currentMonth","setCurrentMonth","format","showClear","setShowClear","firstDayCurrentMonth","parse","colStartClasses","days","eachDayOfInterval","endOfMonth","previousMonth","firstDayNextMonth","add","nextMonth","useEffect","jsxs","jsx","ChevronLeftIcon","ChevronRightIcon","day","dayIdx","getDay","isBefore","selectedDay","isSameDay","isToday","isSameMonth","event","parseISO","Button"],"mappings":"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"}