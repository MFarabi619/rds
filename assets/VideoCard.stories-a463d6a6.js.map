{"version":3,"file":"VideoCard.stories-a463d6a6.js","sources":["../../node_modules/date-fns/esm/differenceInCalendarDays/index.js","../../node_modules/date-fns/esm/compareAsc/index.js","../../node_modules/date-fns/esm/differenceInCalendarMonths/index.js","../../node_modules/date-fns/esm/differenceInCalendarYears/index.js","../../node_modules/date-fns/esm/differenceInDays/index.js","../../node_modules/date-fns/esm/differenceInMilliseconds/index.js","../../node_modules/date-fns/esm/_lib/roundingMethods/index.js","../../node_modules/date-fns/esm/differenceInHours/index.js","../../node_modules/date-fns/esm/differenceInMinutes/index.js","../../node_modules/date-fns/esm/endOfDay/index.js","../../node_modules/date-fns/esm/isLastDayOfMonth/index.js","../../node_modules/date-fns/esm/differenceInMonths/index.js","../../node_modules/date-fns/esm/differenceInSeconds/index.js","../../node_modules/date-fns/esm/differenceInYears/index.js","../../node_modules/date-fns/esm/intervalToDuration/index.js","../../src/components/Cards_Deprecated/VideoCard/VideoCard.tsx","../../src/components/Cards_Deprecated/VideoCard/VideoCardData.ts"],"sourcesContent":["import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function trunc(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport add from \"../add/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(interval) {\n  requiredArgs(1, arguments);\n  var start = toDate(interval.start);\n  var end = toDate(interval.end);\n  if (isNaN(start.getTime())) throw new RangeError('Start Date is invalid');\n  if (isNaN(end.getTime())) throw new RangeError('End Date is invalid');\n  var duration = {};\n  duration.years = Math.abs(differenceInYears(end, start));\n  var sign = compareAsc(end, start);\n  var remainingMonths = add(start, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(end, remainingMonths));\n  var remainingDays = add(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(end, remainingDays));\n  var remainingHours = add(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(end, remainingHours));\n  var remainingMinutes = add(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(end, remainingMinutes));\n  var remainingSeconds = add(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(end, remainingSeconds));\n  return duration;\n}","import { useEffect, useState } from 'react'\nimport ReactPlayer from 'react-player'\nimport { Badge } from '../../Badge/Badge'\nimport { intervalToDuration } from 'date-fns'\n\nexport interface VideoCardProps {\n  source: string\n  tags?: Tags\n}\n\ninterface Tags {\n  category: { id: number; name: string; slug: string }[]\n}\n\nexport function VideoCard({ source, tags }: VideoCardProps) {\n  const [videoDuration, setVideoDuration] = useState(0)\n  const [videoTitle, setVideoTitle] = useState('')\n\n  const handleDuration = (duration: number) => {\n    setVideoDuration(duration)\n  }\n\n  useEffect(() => {\n    const link = source.toString()\n    if (link.includes('vimeo')) {\n      fetch(`https://vimeo.com/api/oembed.json?url=${source}`)\n        .then((res) => res.json())\n        .then((data) => setVideoTitle(data.title))\n    } else {\n      fetch(`https://noembed.com/embed?url=${source}`)\n        .then((res) => res.json())\n        .then((data) => setVideoTitle(data.title))\n    }\n  }, [source])\n\n  const duration = intervalToDuration({ start: 0, end: videoDuration * 1000 })\n\n  return (\n    <div className=\"not-prose group relative flex flex-col overflow-hidden rounded-lg bg-white shadow-lg duration-300 ease-in @container hover:scale-105 md:max-w-lg\">\n      {/* <div className=\"relative flex flex-col h-full\"> */}\n      <div className=\"relative pt-[56.25%]\">\n        <ReactPlayer\n          url={source}\n          className=\"absolute top-0 left-0\"\n          width=\"100%\"\n          height=\"100%\"\n          controls\n          onDuration={handleDuration}\n        />\n      </div>\n      <div className=\"flex flex-col space-y-2 py-6 px-7 @sm:md:space-y-3\">\n        {videoDuration && (\n          <p className=\"text-sm italic text-cu-black-600 @sm:md:text-base\">\n            Duration: {`${duration.minutes}m : ${duration.seconds}s`}\n          </p>\n        )}\n        <h3 className=\"text-lg font-semibold text-cu-black group-hover:text-cu-red @sm:md:text-xl\">{videoTitle}</h3>\n      </div>\n      {tags && (\n        <div className=\"mt-auto px-7 pb-5\">\n          {tags?.category?.map((tag) => (\n            <Badge key={tag.id}>{tag.name}</Badge>\n          ))}\n        </div>\n      )}\n      {/* </div> */}\n    </div>\n  )\n}\n","export const VideoCardData = [\n  {\n    id: 1,\n    source: 'https://www.youtube.com/watch?v=7h5m7Clm9uo',\n    tags: {\n      category: [\n        {\n          id: 3,\n          name: 'Category One',\n          slug: 'category-one',\n        },\n        {\n          id: 4,\n          name: 'Category Two',\n          slug: 'category-two',\n        },\n      ],\n    },\n  },\n  {\n    id: 2,\n    source: 'https://www.youtube.com/watch?v=V2vTFG0zfL8',\n    tags: {\n      category: [\n        {\n          id: 3,\n          name: 'Category One',\n          slug: 'category-one',\n        },\n        {\n          id: 4,\n          name: 'Category Two',\n          slug: 'category-two',\n        },\n      ],\n    },\n  },\n  {\n    id: 3,\n    source: 'https://www.youtube.com/watch?v=3PUK_wRVzHI',\n    tags: {\n      category: [\n        {\n          id: 3,\n          name: 'Category One',\n          slug: 'category-one',\n        },\n        {\n          id: 4,\n          name: 'Category Two',\n          slug: 'category-two',\n        },\n      ],\n    },\n  },\n  {\n    id: 4,\n    source: 'https://vimeo.com/106595658',\n    tags: {\n      category: [\n        {\n          id: 3,\n          name: 'Category One',\n          slug: 'category-one',\n        },\n        {\n          id: 4,\n          name: 'Category Two',\n          slug: 'category-two',\n        },\n      ],\n    },\n  },\n  {\n    id: 5,\n    source: 'https://www.youtube.com/watch?v=bh2x91LLcEY',\n    tags: {\n      category: [\n        {\n          id: 3,\n          name: 'Category One',\n          slug: 'category-one',\n        },\n        {\n          id: 4,\n          name: 'Category Two',\n          slug: 'category-two',\n        },\n      ],\n    },\n  },\n  {\n    id: 6,\n    source: 'https://vimeo.com/108970526',\n    tags: {\n      category: [\n        {\n          id: 3,\n          name: 'Category One',\n          slug: 'category-one',\n        },\n        {\n          id: 4,\n          name: 'Category Two',\n          slug: 'category-two',\n        },\n      ],\n    },\n  },\n]\n"],"names":["MILLISECONDS_IN_DAY","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","requiredArgs","startOfDayLeft","startOfDay","startOfDayRight","timestampLeft","getTimezoneOffsetInMilliseconds","timestampRight","compareAsc","dateLeft","toDate","dateRight","diff","differenceInCalendarMonths","yearDiff","monthDiff","differenceInCalendarYears","compareLocalAsc","differenceInDays","sign","difference","isLastDayNotFull","result","differenceInMilliseconds","roundingMap","value","defaultRoundingMethod","getRoundingMethod","method","differenceInHours","options","millisecondsInHour","differenceInMinutes","millisecondsInMinute","endOfDay","dirtyDate","date","isLastDayOfMonth","endOfMonth","differenceInMonths","isLastMonthNotFull","differenceInSeconds","differenceInYears","isLastYearNotFull","intervalToDuration","interval","start","end","duration","remainingMonths","add","remainingDays","remainingHours","remainingMinutes","remainingSeconds","VideoCard","source","tags","videoDuration","setVideoDuration","useState","videoTitle","setVideoTitle","handleDuration","duration2","useEffect","res","data","jsxs","jsx","ReactPlayer","_a","tag","Badge","VideoCardData"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]}