{"version":3,"file":"Banner-14011a18.js","sources":["../../src/_deprecated/Banner/Banner.styles.tsx","../../src/_deprecated/Banner/Banner.Animated.tsx","../../src/_deprecated/Banner/Banner.tsx"],"sourcesContent":["const styles = {\n  core: `not-prose relative py-16 md:py-32 md:flex md:items-center md:min-h-[240px]`,\n  buttonWrapper: `flex gap-6 flex-wrap md:flex-1`,\n  overlap: `md:pb-32 md:pt-20`,\n}\nexport default styles\n\nexport const typeStyles = {\n  'light-grey': `bg-cu-black-50 text-cu-black-800`,\n  'light-fade': `bg-gradient-to-b from-white to-cu-black-50 text-cu-black-800`,\n  'dark-wave': `bg-cu-black-800 text-white`,\n  'red-wave': `bg-gradient-to-b from-cu-red to-cu-red-900 text-white`,\n  animated: `bg-white text-cu-black-800`,\n  image: `bg-cu-black-800 text-white md:py-48`,\n}\n\nexport const contentStyles = {\n  title: `font-semibold text-3xl`,\n  paragraph: `text-base lg:text-xl max-w-5xl`,\n}\n","import { useRef } from 'react'\n// import { useEffect, useRef } from 'react'\n// import { Animation } from './Animation/Animation.js'\n\nexport const BannerAnimated = () => {\n  //   const gradient = new Animation()\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  const divStyle = {\n    '--gradient-color-1': '#c3e4ff',\n    '--gradient-color-2': '#6ec3f4',\n    '--gradient-color-3': '#eae2ff',\n    '--gradient-color-4': '#b9beff',\n  }\n\n  //   useEffect(() => {\n  //     if (canvasRef.current) {\n  //       gradient.initGradient(canvasRef.current)\n  //     }\n  //   }, [canvasRef, gradient])\n\n  return (\n    <canvas\n      //   ref={canvasRef}\n      ref={canvasRef}\n      style={{\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        top: 'auto',\n        left: '0',\n        bottom: '0',\n        overflow: 'hidden',\n        opacity: 0.5,\n        ...divStyle,\n      }}\n      data-transition-in\n    />\n  )\n}\n","import React from 'react'\nimport styles, { typeStyles, contentStyles } from './Banner.styles'\nimport { rdsFontSizes, rdsMaxWidth } from '../../utils/optionClasses'\nimport { globalSpace } from '../../utils/globalClasses'\nimport { BannerAnimated } from './Banner.Animated'\n\nexport interface BannerProps {\n  children?: React.ReactNode\n  title?: string\n  paragraph?: string\n  fontSize?: '5xl' | '6xl'\n  maxWidth?: 'full' | '5xl' | '7xl'\n  isType?: 'light-grey' | 'light-fade' | 'dark-wave' | 'red-wave' | 'image' | 'animated'\n  align?: 'center' | 'left'\n  hasOverlap?: boolean\n  image?: string\n  imageAlt?: string\n}\n\nexport interface BannerImgProps {\n  image?: string\n  imageAlt?: string\n}\n\nconst BannerBase = ({\n  children,\n  title,\n  paragraph,\n  maxWidth = '5xl',\n  isType = 'light-grey',\n  fontSize = '5xl',\n  align = 'center',\n  hasOverlap,\n  image,\n  imageAlt = 'Decorative background image',\n}: BannerProps & BannerImgProps) => {\n  const bannerSpacing = isType === 'image' ? 'md:py-48' : 'md:py-32'\n\n  const flexAlign =\n    align === 'center'\n      ? 'flex-col last:[&>*]:justify-center'\n      : 'flex-col md:flex-row last:[&>*]:justify-center last:md:[&>*]:justify-end'\n\n  const hasParaAndButtons = paragraph && children ? ' md:max-w-3xl md:w-8/12' : ''\n\n  const contentAlign = align === 'center' ? 'text-center' : 'text-center md:text-left' + hasParaAndButtons\n\n  let overlapStyles = hasOverlap ? styles.overlap : ''\n\n  if (hasOverlap && isType === 'image') {\n    overlapStyles = 'md:pb-48 md:pt-40'\n  }\n\n  return (\n    <>\n      <header\n        className={`cu-banner ${styles.core} ${globalSpace.paddingX} ${typeStyles[isType]} ${bannerSpacing} ${overlapStyles}`}\n        id=\"banner\"\n      >\n        <div\n          className={`z-10 flex flex-1 ${flexAlign} m-auto items-center justify-center gap-8 ${rdsMaxWidth[maxWidth]} [&>*]:z-10`}\n        >\n          <div className={`flex flex-auto flex-col gap-6 ${contentAlign}`}>\n            <h1 className={`${contentStyles.title} ${rdsFontSizes[fontSize]}`}>{title}</h1>\n            {paragraph && <p className={contentStyles.paragraph}>{paragraph}</p>}\n          </div>\n          {children}\n        </div>\n\n        {isType === 'image' && <BannerImg image={image} imageAlt={imageAlt} />}\n        {isType === 'dark-wave' && <BannerWave />}\n        {isType === 'red-wave' && <BannerWave />}\n        {isType === 'animated' && <BannerAnimated />}\n      </header>\n    </>\n  )\n}\n\nconst BannerImg = ({ image, imageAlt }: BannerImgProps) => {\n  return (\n    <div className=\"absolute inset-0\">\n      <img className=\"h-full w-full object-cover\" src={image} alt={imageAlt} />\n      <div className=\"absolute inset-0 bg-cu-black-800 mix-blend-multiply\" aria-hidden=\"true\" />\n    </div>\n  )\n}\n\nconst BannerWave = () => {\n  return <div className=\"absolute inset-0 bg-cu-waves-white-10 bg-contain bg-bottom bg-no-repeat md:bg-cover\"></div>\n}\n\nconst ButtonGroup = ({ children }: BannerProps) => {\n  return <div className={`buttons ${styles.buttonWrapper}`}>{children}</div>\n}\n\nexport const Banner = Object.assign(BannerBase, {\n  ButtonGroup,\n})\n\nBannerBase.displayName = 'Banner'\nButtonGroup.displayName = 'Banner.ButtonGroup'\n"],"names":["styles","typeStyles","contentStyles","BannerAnimated","canvasRef","useRef","divStyle","jsx","BannerBase","children","title","paragraph","maxWidth","isType","fontSize","align","hasOverlap","image","imageAlt","bannerSpacing","flexAlign","contentAlign","overlapStyles","Fragment","jsxs","globalSpace","rdsMaxWidth","rdsFontSizes","BannerImg","BannerWave","ButtonGroup","Banner"],"mappings":"6LAAA,MAAMA,EAAS,CACb,KAAM,6EACN,cAAe,iCACf,QAAS,mBACX,EAGaC,EAAa,CACxB,aAAc,mCACd,aAAc,+DACd,YAAa,6BACb,WAAY,wDACZ,SAAU,6BACV,MAAO,qCACT,EAEaC,EAAgB,CAC3B,MAAO,yBACP,UAAW,gCACb,ECfaC,EAAiB,IAAM,CAE5B,MAAAC,EAAYC,SAA0B,IAAI,EAE1CC,EAAW,CACf,qBAAsB,UACtB,qBAAsB,UACtB,qBAAsB,UACtB,qBAAsB,SAAA,EAUtB,OAAAC,EAAA,IAAC,SAAA,CAEC,IAAKH,EACL,MAAO,CACL,MAAO,OACP,OAAQ,OACR,SAAU,WACV,IAAK,OACL,KAAM,IACN,OAAQ,IACR,SAAU,SACV,QAAS,GACT,GAAGE,CACL,EACA,qBAAkB,EAAA,CAAA,CAGxB,ECfAE,EAAA,CAAA,CAAoB,SAAAC,EAClB,MAAAC,EACA,UAAAC,EACA,SAAAC,EAAA,MACW,OAAAC,EAAA,aACF,SAAAC,EAAA,MACE,MAAAC,EAAA,SACH,WAAAC,EACR,MAAAC,EACA,SAAAC,EAAA,6BAEF,IAAA,CACE,MAAAC,EAAAN,IAAA,QAAA,WAAA,WAEAO,EAAAL,IAAA,SAAA,qCAAA,2EAOAM,EAAAN,IAAA,SAAA,cAAA,4BAFAJ,GAAAF,EAAA,0BAAA,IAIA,IAAAa,EAAAN,EAAAhB,EAAA,QAAA,GAEA,OAAAgB,GAAAH,IAAA,UACES,EAAA,qBAGFf,MAAAgB,EAAAA,SAAA,CAAA,SAAAC,EAAA,KAEI,SAAC,CAAA,UAAA,aAAAxB,EAAA,IAAA,IAAAyB,EAAA,QAAA,IAAAxB,EAAAY,CAAA,CAAA,IAAAM,CAAA,IAAAG,CAAA,GACoH,GAAA,SAChH,SAAA,CAEHE,EAAA,KAAA,MAAC,CAAA,UAAA,oBAAAJ,CAAA,6CAAAM,EAAAd,CAAA,CAAA,cAC2G,SAAA,CAE1GY,EAAA,KAAA,MAAA,CAAA,UAAA,iCAAAH,CAAA,GAAA,SAAA,CACEd,EAAAA,IAAA,KAAA,CAAA,UAAA,GAAAL,EAAA,KAAA,IAAAyB,EAAAb,CAAA,CAAA,GAAA,SAAAJ,CAAA,CAAA,EAA0EC,GAAAJ,EAAAA,IAAA,IAAA,CAAA,UAAAL,EAAA,UAAA,SAAAS,EAAA,CACV,EAAA,EAClEF,CACC,CAAA,CAAA,EACHI,IAAA,SAAAN,EAAA,IAAAqB,EAAA,CAAA,MAAAX,EAAA,SAAAC,EAAA,EAEoEL,IAAA,aAAAN,MAAAsB,EAAA,CAAA,CAAA,EAC7BhB,IAAA,YAAAN,MAAAsB,EAAA,CAAA,CAAA,EACDhB,IAAA,YAAAN,MAAAJ,EAAA,CAAA,CAAA,CACI,CAAA,CAAA,CAAA,CAAA,CAIlD,EAEAyB,EAAA,CAAA,CAAA,MAAAX,EAAA,SAAAC,KACEM,EAAA,KAAA,MAAA,CAAA,UAAA,mBAAA,SAAA,CAEIjB,MAAA,MAAA,CAAA,UAAA,6BAAA,IAAAU,EAAA,IAAAC,EAAA,EAAuEX,EAAA,IAAA,MAAA,CAAA,UAAA,sDAAA,cAAA,OAAA,CACiB,CAAA,CAAA,EAK9FsB,EAAA,IACEtB,EAAA,IAAA,MAAA,CAAA,UAAA,qFAAA,CAAA,EAGFuB,EAAA,CAAA,CAAA,SAAArB,KACEF,MAAA,MAAA,CAAA,UAAA,WAAAP,EAAA,aAAA,GAAA,SAAAS,CAAA,CAAA,EAGKsB,EAAA,OAAA,OAAAvB,EAAA,CAAyC,YAAAsB,CAEhD,CAAA,EAEAtB,EAAA,YAAA,SACAsB,EAAA,YAAA"}