{"version":3,"file":"Embed-d2d6c307.js","sources":["../../src/components/Embed/Embed.Styles.ts","../../src/components/Embed/Embed.PowerBi.tsx","../../src/components/Embed/Embed.Kaltura.tsx","../../src/components/Embed/Embed.YouTube.tsx","../../src/components/Embed/Embed.Vimeo.tsx","../../src/components/Embed/Embed.TED.tsx","../../src/components/Embed/Embed.tsx"],"sourcesContent":["export const styles = {\n  base: `relative w-full pb-[56.25%] overflow-hidden border border-cu-black-100`,\n  powerBi: `absolute top-0 left-0 w-full h-full`,\n  kaltura: `absolute top-0 left-0 w-full h-full`,\n  video: `absolute top-0 left-0 w-full h-full`,\n}\n","import { styles } from './Embed.Styles'\nexport interface EmbedPowerBiProps {\n  title: string\n  url: string\n}\n\nexport const EmbedPowerBi = ({ title, url }: EmbedPowerBiProps) => {\n  return <iframe title={title} src={url} className={styles.powerBi}></iframe>\n}\n\nEmbedPowerBi.displayName = 'Embed.PowerBi'\n","import { styles } from './Embed.Styles'\nexport interface EmbedKalturaProps {\n  title: string\n  url: string\n}\n\nexport const EmbedKaltura = ({ title, url }: EmbedKalturaProps) => {\n  let kalturaUrl = ''\n  let lastPiece = ''\n\n  if (url) {\n    const urlParts = url.split('/')\n    lastPiece = urlParts[urlParts.length - 1]\n    kalturaUrl = `https://mediaspace.carleton.ca/embed/secure/iframe/entryId/${lastPiece}/uiConfId/36153741/st/0`\n  }\n\n  return (\n    <iframe\n      id={`kmsembed-${lastPiece}`}\n      title={title}\n      src={kalturaUrl}\n      className={`kmsembed ${styles.kaltura}`}\n      allowFullScreen\n      allow=\"autoplay *; fullscreen *; encrypted-media *\"\n      referrerPolicy=\"no-referrer-when-downgrade\"\n      sandbox=\"allow-downloads allow-forms allow-same-origin allow-scripts allow-top-navigation allow-pointer-lock allow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-navigation-by-user-activation\"\n    ></iframe>\n  )\n}\n\nEmbedKaltura.displayName = 'Embed.Kaltura'\n","import { styles } from './Embed.Styles'\nexport interface EmbedYouTubeProps {\n  title: string\n  url: string\n}\n\nexport const EmbedYouTube = ({ title, url }: EmbedYouTubeProps) => {\n  let embedURL = ''\n  let videoID\n\n  if (url) {\n    const match = url.match(/(?:\\/|v=)([a-zA-Z0-9_-]{11})/)\n    videoID = match ? match[1] : null\n    embedURL = `https://www.youtube.com/embed/${videoID}`\n  }\n\n  return (\n    <iframe\n      title={title}\n      src={embedURL}\n      className={`${styles.video}`}\n      allowFullScreen\n      allow=\"autoplay *; fullscreen *; encrypted-media *\"\n      referrerPolicy=\"no-referrer-when-downgrade\"\n      sandbox=\"allow-downloads allow-forms allow-same-origin allow-scripts allow-top-navigation allow-pointer-lock allow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-navigation-by-user-activation\"\n    ></iframe>\n  )\n}\n\nEmbedYouTube.displayName = 'Embed.YouTube'\n","import { styles } from './Embed.Styles'\nexport interface EmbedVimeoProps {\n  title: string\n  url: string\n}\n\nexport const EmbedVimeo = ({ title, url }: EmbedVimeoProps) => {\n  let embedURL = ''\n  let lastPiece = ''\n\n  if (url) {\n    const urlParts = url.split('/')\n    lastPiece = urlParts[urlParts.length - 1]\n    embedURL = `https://player.vimeo.com/video/${lastPiece}`\n  }\n\n  return (\n    <iframe\n      title={title}\n      src={embedURL}\n      className={`${styles.video}`}\n      allowFullScreen\n      allow=\"autoplay *; fullscreen *; encrypted-media *\"\n      referrerPolicy=\"no-referrer-when-downgrade\"\n      sandbox=\"allow-downloads allow-forms allow-same-origin allow-scripts allow-top-navigation allow-pointer-lock allow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-navigation-by-user-activation\"\n    ></iframe>\n  )\n}\n\nEmbedVimeo.displayName = 'Embed.Vimeo'\n","import { styles } from './Embed.Styles'\nexport interface EmbedTEDProps {\n  title: string\n  url: string\n}\n\nexport const EmbedTED = ({ title, url }: EmbedTEDProps) => {\n  let embedURL = ''\n  let lastPiece = ''\n\n  if (url) {\n    const urlParts = url.split('/')\n    lastPiece = urlParts[urlParts.length - 1]\n    embedURL = `https://embed.ted.com/talks/lang/en/${lastPiece}`\n  }\n\n  return (\n    <iframe\n      title={title}\n      src={embedURL}\n      className={`${styles.video}`}\n      allowFullScreen\n      allow=\"autoplay *; fullscreen *; encrypted-media *\"\n      referrerPolicy=\"no-referrer-when-downgrade\"\n      sandbox=\"allow-downloads allow-forms allow-same-origin allow-scripts allow-top-navigation allow-pointer-lock allow-popups allow-modals allow-orientation-lock allow-popups-to-escape-sandbox allow-presentation allow-top-navigation-by-user-activation\"\n    ></iframe>\n  )\n}\n\nEmbedTED.displayName = 'Embed.TED'\n","import React from 'react'\nimport { EmbedPowerBi } from './Embed.PowerBi'\nimport { EmbedKaltura } from './Embed.Kaltura'\nimport { EmbedYouTube } from './Embed.YouTube'\nimport { EmbedVimeo } from './Embed.Vimeo'\nimport { EmbedTED } from './Embed.TED'\nimport { rdsMaxWidth } from '../../utils/optionClasses'\nimport { styles } from './Embed.Styles'\n\nexport interface EmbedProps {\n  children: React.ReactNode\n  maxWidth?: 'full' | '5xl' | '7xl'\n}\n\nexport const EmbedWrapper = ({ children, maxWidth = '5xl' }: EmbedProps) => {\n  return (\n    <figure className={`not-contained mx-auto ${rdsMaxWidth[maxWidth]}`}>\n      <div className={`${styles.base}`}>{children}</div>\n    </figure>\n  )\n}\n\nexport const Embed = Object.assign(EmbedWrapper, {\n  PowerBi: EmbedPowerBi,\n  Kaltura: EmbedKaltura,\n  YouTube: EmbedYouTube,\n  TED: EmbedTED,\n  Vimeo: EmbedVimeo,\n})\n"],"names":["styles","EmbedPowerBi","title","url","jsx","EmbedKaltura","kalturaUrl","lastPiece","urlParts","EmbedYouTube","embedURL","videoID","match","EmbedVimeo","EmbedTED","EmbedWrapper","children","maxWidth","rdsMaxWidth","Embed"],"mappings":"8FAAO,MAAMA,EAAS,CACpB,KAAM,yEACN,QAAS,sCACT,QAAS,sCACT,MAAO,qCACT,ECCOC,EAAA,CAAA,CAAA,MAAAC,EAAA,IAAAC,KACLC,EAAA,IAAA,SAAA,CAAA,MAAAF,EAAA,IAAAC,EAAA,UAAAH,EAAA,OAAA,CAAA,EAGFC,EAAA,YAAA,+TCJO,MAAAI,EAAA,CAAA,CAAA,MAAAH,EAAA,IAAAC,KAAA,CACL,IAAAG,EAAA,GACAC,EAAA,GAEA,GAAAJ,EAAA,CACE,MAAAK,EAAAL,EAAA,MAAA,GAAA,EACAI,EAAAC,EAAAA,EAAA,OAAA,CAAA,EACAF,EAAA,8DAAAC,CAAA,yBAAoF,CAGtF,OAAAH,EAAA,IACE,SAAC,CAAA,GAAA,YAAAG,CAAA,GAC0B,MAAAL,EACzB,IAAAI,EACK,UAAA,YAAAN,EAAA,OAAA,GACgC,gBAAA,GACtB,MAAA,8CACT,eAAA,6BACS,QAAA,gPACP,CAAA,CAGd,EAEAK,EAAA,YAAA,+TCxBO,MAAAI,EAAA,CAAA,CAAA,MAAAP,EAAA,IAAAC,KAAA,CACL,IAAAO,EAAA,GACAC,EAEA,GAAAR,EAAA,CACE,MAAAS,EAAAT,EAAA,MAAA,8BAAA,EACAQ,EAAAC,EAAAA,EAAA,CAAA,EAAA,KACAF,EAAA,iCAAAC,CAAA,EAAmD,CAGrD,OAAAP,EAAA,IACE,SAAC,CAAA,MAAAF,EACC,IAAAQ,EACK,UAAA,GAAAV,EAAA,KAAA,GACqB,gBAAA,GACX,MAAA,8CACT,eAAA,6BACS,QAAA,gPACP,CAAA,CAGd,EAEAS,EAAA,YAAA,+TCvBO,MAAAI,EAAA,CAAA,CAAA,MAAAX,EAAA,IAAAC,KAAA,CACL,IAAAO,EAAA,GACAH,EAAA,GAEA,GAAAJ,EAAA,CACE,MAAAK,EAAAL,EAAA,MAAA,GAAA,EACAI,EAAAC,EAAAA,EAAA,OAAA,CAAA,EACAE,EAAA,kCAAAH,CAAA,EAAsD,CAGxD,OAAAH,EAAA,IACE,SAAC,CAAA,MAAAF,EACC,IAAAQ,EACK,UAAA,GAAAV,EAAA,KAAA,GACqB,gBAAA,GACX,MAAA,8CACT,eAAA,6BACS,QAAA,gPACP,CAAA,CAGd,EAEAa,EAAA,YAAA,qTCvBO,MAAAC,EAAA,CAAA,CAAA,MAAAZ,EAAA,IAAAC,KAAA,CACL,IAAAO,EAAA,GACAH,EAAA,GAEA,GAAAJ,EAAA,CACE,MAAAK,EAAAL,EAAA,MAAA,GAAA,EACAI,EAAAC,EAAAA,EAAA,OAAA,CAAA,EACAE,EAAA,uCAAAH,CAAA,EAA2D,CAG7D,OAAAH,EAAA,IACE,SAAC,CAAA,MAAAF,EACC,IAAAQ,EACK,UAAA,GAAAV,EAAA,KAAA,GACqB,gBAAA,GACX,MAAA,8CACT,eAAA,6BACS,QAAA,gPACP,CAAA,CAGd,EAEAc,EAAA,YAAA,2SCfO,MAAAC,EAAA,CAAA,CAAA,SAAAC,EAAA,SAAAC,EAAA,KAAA,IACLb,EAAA,IAAA,SAAA,CAAA,UAAA,yBAAAc,EAAAD,CAAA,CAAA,GAAA,SAAAb,EAAA,IAAA,MAAA,CAAA,UAAA,GAAAJ,EAAA,IAAA,GAAA,SAAAgB,EAAA,CAAA,CAAA,EAOKG,EAAA,OAAA,OAAAJ,EAAA,CAA0C,QAAAd,EACtC,QAAAI,EACA,QAAAI,EACA,IAAAK,EACJ,MAAAD,CAEP,CAAA"}