{"version":3,"file":"Card-7f62fac3.js","sources":["../../src/components/Card/Card.Styles.ts","../../src/components/Card/CardFigure.tsx","../../src/components/Card/CardVideo.tsx","../../src/components/Card/CardContent.tsx","../../src/components/Card/CardDateBox.tsx","../../src/components/Card/CardHeader.tsx","../../src/components/Card/CardExcerpt.tsx","../../src/components/Card/CardBadges.tsx","../../src/components/Card/CardPostMeta.tsx","../../src/components/Card/CardEventMeta.tsx","../../src/components/Card/CardPeopleMeta.tsx","../../src/components/Card/Card.tsx"],"sourcesContent":["export const styles = {\n  card: `not-prose group relative flex flex-col cu-card cursor-pointer overflow-hidden rounded-lg bg-white shadow-lg duration-300 ease-in @container hover:scale-105 md:max-w-lg`,\n  content: `flex flex-col space-y-2 py-6 px-7 @sm:md:space-y-3 relative`,\n  header: `text-lg font-semibold text-cu-black group-hover:text-cu-red @sm:md:text-xl leading-6 @sm:md:leading-8`,\n  excerpt: `text-base text-cu-black-600`,\n  more: `font-semibold text-cu-red group-hover:text-cyan-600`,\n  badges: `pb-6 mt-auto px-7`,\n}\n\nexport const figureStyles = {\n  figure: `relative`,\n  round: `pt-8 pb-2 px-6`,\n}\n\nexport const metaStyles = {\n  wrapper: `space-y-1.5 @sm:md:space-y-2`,\n  item: `text-sm text-cu-black-600 @sm:md:text-base`,\n  itemLarge: `text-base text-cu-black-600 @sm:md:text-lg`,\n  italic: `italic`,\n  bold: `font-semibold text-cyan-600`,\n  alignIcon: `flex`,\n  redIcon: `flex-shrink-0 w-5 h-5 @sm:md:w-6 @sm:md:h-6 mr-2 text-cu-red-300`,\n}\n\nexport const eventStyles = {\n  dateBox: `z-10 -mt-16 mb-3 flex flex-col items-center justify-center w-20 h-20 bg-white rounded-md shadow-md group-hover:bg-cu-red`,\n  dateBoxMonth: `text-xs font-bold uppercase text-cu-red group-hover:text-white`,\n  dateBoxDay: `text-2xl font-bold uppercase text-cu-black-800 group-hover:text-white`,\n}\n\nexport const videoStyle = {\n  container: `relative pt-[56.25%] bg-cu-black-900`,\n  player: `absolute top-0 left-0`,\n}\n","import React from 'react'\nimport { figureStyles } from './Card.Styles'\n\nexport interface CardFigureProps {\n  children: React.ReactNode\n  isRound?: boolean\n}\n\nexport const CardFigure = ({ children, isRound }: CardFigureProps) => {\n  const roundedImage = isRound ? `cu-figure cu-figure--round ${figureStyles.round}` : 'cu-figure'\n\n  return <figure className={`${roundedImage} ${figureStyles.figure}`}>{children}</figure>\n}\n","import { useState, useEffect } from 'react'\nimport ReactPlayer from 'react-player'\nimport { videoStyle } from './Card.Styles'\n\nexport interface CardVideoProps {\n  source: string\n}\n\nexport const CardVideo = ({ source }: CardVideoProps) => {\n  const [initialRender, setInitialRender] = useState(false)\n\n  // Run after first render and load the video player\n  useEffect(() => {\n    setInitialRender(true)\n  }, [])\n\n  // Prevent the component from rendering and avoid hydration error\n  if (!initialRender) {\n    return (\n      <div className={videoStyle.container}>\n        <p className=\"hidden\">Loading video</p>\n      </div>\n    )\n  } else {\n    return (\n      <div className={videoStyle.container}>\n        <ReactPlayer url={source} className={videoStyle.player} width=\"100%\" height=\"100%\" controls />\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { styles } from './Card.Styles'\n\nexport interface CardContentProps {\n  children: React.ReactNode\n}\n\nexport const CardContent = ({ children }: CardContentProps) => {\n  return <div className={styles.content}>{children}</div>\n}\n","import { getDate, getMonth, parseISO } from 'date-fns'\nimport { eventStyles } from './Card.Styles'\n\nexport interface CardDateBoxProps {\n  startDate: string\n}\n\nexport const CardDateBox = ({ startDate }: CardDateBoxProps) => {\n  const getMonthName = (month: number, short = false) => {\n    const d = new Date()\n    d.setMonth(month)\n    const monthName = d.toLocaleString('default', {\n      month: short ? 'short' : 'long',\n    })\n    return monthName\n  }\n\n  const getStartDate = parseISO(startDate)\n  const eventStartDate = getDate(getStartDate)\n  const eventStartMonth = getMonth(getStartDate)\n\n  return (\n    <div className={eventStyles.dateBox}>\n      <p className={eventStyles.dateBoxMonth}>{getMonthName(eventStartMonth, true)}</p>\n      <p className={eventStyles.dateBoxDay}>{eventStartDate}</p>\n    </div>\n  )\n}\n","import { styles } from './Card.Styles'\n\nexport interface CardHeaderProps {\n  text: string\n}\n\nexport const CardHeader = ({ text }: CardHeaderProps) => {\n  return <h2 className={styles.header}>{text}</h2>\n}\n","import { styles } from './Card.Styles'\n\nexport interface CardExcerptProps {\n  text: string\n}\n\nexport const CardExcerpt = ({ text }: CardExcerptProps) => {\n  return (\n    <p className={styles.excerpt}>\n      {text.length > 170 ? `${text.substring(0, 170)}...` : text}\n      <span className={styles.more}> Read more</span>\n    </p>\n  )\n}\n","import { Badge } from '../Badge/Badge'\nimport { styles } from './Card.Styles'\n\nexport interface CardBadgesProps {\n  tags?: Tags\n}\n\ninterface Tags {\n  category: {\n    id: number\n    name: string\n    slug: string\n  }[]\n}\n\nexport const CardBadges = ({ tags }: CardBadgesProps) => {\n  return (\n    <div className={styles.badges}>\n      {tags?.category?.map((tag) => (\n        <Badge key={tag.id}>{tag.name}</Badge>\n      ))}\n    </div>\n  )\n}\n","import { metaStyles } from './Card.Styles'\n\nexport interface CardPostMetaProps {\n  date?: string | Date\n}\n\nexport const CardPostMeta = ({ date }: CardPostMetaProps) => {\n  const formatedDate = date\n    ? new Date(date).toLocaleString('en-US', {\n        month: 'long',\n        day: '2-digit',\n        year: 'numeric',\n      })\n    : null\n\n  return <time className={`${metaStyles.item} ${metaStyles.italic}`}>{formatedDate}</time>\n}\n","import { getDate, getMonth, isSameDay, parseISO } from 'date-fns'\nimport { CalendarDaysIcon, ClockIcon, MapPinIcon } from '@heroicons/react/24/outline'\nimport { metaStyles } from './Card.Styles'\n\nexport interface CardEventMetaProps {\n  startDateTime: string\n  endDateTime: string\n  onCampus: boolean\n  onCampusBuilding?: string | null\n  onCampusRoomNumber?: string | null\n  eventAddress?: string\n}\n\nexport const CardEventMeta = ({\n  startDateTime,\n  endDateTime,\n  onCampus,\n  onCampusBuilding,\n  onCampusRoomNumber,\n  eventAddress,\n}: CardEventMetaProps) => {\n  // Get event month by name\n  const getMonthName = (month: number, short = false) => {\n    const d = new Date()\n    d.setMonth(month)\n    const monthName = d.toLocaleString('default', {\n      month: short ? 'short' : 'long',\n    })\n    return monthName\n  }\n\n  // Format event time\n  const formatTime = (date: Date) => {\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n    const ampm = hours >= 12 ? 'PM' : 'AM'\n    hours = hours % 12\n    hours = hours ? hours : 12\n    minutes = minutes < 10 ? 0 + minutes : minutes\n    const strTime = hours + ':' + minutes + ' ' + ampm\n    return strTime\n  }\n\n  // Set start and end date constants\n  const startDate = parseISO(startDateTime)\n  const endDate = parseISO(endDateTime)\n  const eventStartDate = getDate(startDate)\n  const eventStartMonth = getMonth(startDate)\n  const eventEndDate = getDate(endDate)\n  const isEventSameDay = isSameDay(startDate, endDate)\n\n  // Set single and multi-day constants\n  const singleDayEvent = formatTime(startDate) + ' — ' + formatTime(endDate)\n  const multiDayEvent = getMonthName(eventStartMonth) + ' ' + eventStartDate + ' — ' + eventEndDate\n\n  // Check if multiday\n  const multiDayDisplay = () => {\n    if (!isEventSameDay) {\n      return (\n        <>\n          <CalendarDaysIcon className={metaStyles.redIcon} aria-hidden=\"true\" />\n          {multiDayEvent}\n        </>\n      )\n    } else {\n      return (\n        <>\n          <ClockIcon className={metaStyles.redIcon} aria-hidden=\"true\" />\n          {singleDayEvent}\n        </>\n      )\n    }\n  }\n\n  return (\n    <ul className={metaStyles.wrapper}>\n      <li className={`${metaStyles.item} ${metaStyles.alignIcon}`}>{multiDayDisplay()}</li>\n      <li className={`${metaStyles.item} ${metaStyles.alignIcon}`}>\n        <MapPinIcon className={metaStyles.redIcon} aria-hidden=\"true\" />\n        {onCampus ? onCampusRoomNumber + ' ' + onCampusBuilding : eventAddress}\n      </li>\n    </ul>\n  )\n}\n","import { metaStyles } from './Card.Styles'\n\nexport interface CardPeopleMetaProps {\n  jobTitle?: string\n  email?: string\n  phone?: string\n}\n\nexport const CardPeopleMeta = ({ jobTitle, email, phone }: CardPeopleMetaProps) => {\n  return (\n    <ul className={metaStyles.wrapper}>\n      {jobTitle && <li className={`${metaStyles.item} ${metaStyles.itemLarge} ${metaStyles.italic}`}>{jobTitle}</li>}\n      {email && (\n        <li className={metaStyles.item}>\n          <strong className={metaStyles.bold}>{email}</strong>\n        </li>\n      )}\n      {phone && <li className={metaStyles.item}>{phone}</li>}\n    </ul>\n  )\n}\n","import React from 'react'\nimport { styles } from './Card.Styles'\nimport { CardFigure } from './CardFigure'\nimport { CardVideo } from './CardVideo'\nimport { CardContent } from './CardContent'\nimport { CardDateBox } from './CardDateBox'\nimport { CardHeader } from './CardHeader'\nimport { CardExcerpt } from './CardExcerpt'\nimport { CardBadges } from './CardBadges'\nimport { CardPostMeta } from './CardPostMeta'\nimport { CardEventMeta } from './CardEventMeta'\nimport { CardPeopleMeta } from './CardPeopleMeta'\n\nexport interface CardProps {\n  children: React.ReactNode\n  isCenter?: boolean\n}\n\nexport const CardWrapper = ({ children, isCenter }: CardProps) => {\n  const centerText = isCenter ? 'text-center' : ''\n  return <div className={`${styles.card} ${centerText}`}>{children}</div>\n}\n\nexport const Card = Object.assign(CardWrapper, {\n  Figure: CardFigure,\n  Video: CardVideo,\n  Content: CardContent,\n  DateBox: CardDateBox,\n  Header: CardHeader,\n  Excerpt: CardExcerpt,\n  Badges: CardBadges,\n  PostMeta: CardPostMeta,\n  EventMeta: CardEventMeta,\n  PeopleMeta: CardPeopleMeta,\n})\n"],"names":["styles","figureStyles","metaStyles","eventStyles","videoStyle","CardFigure","children","isRound","roundedImage","jsx","CardVideo","source","initialRender","setInitialRender","useState","useEffect","ReactPlayer","CardContent","CardDateBox","startDate","getMonthName","month","short","d","getStartDate","parseISO","eventStartDate","getDate","eventStartMonth","getMonth","jsxs","CardHeader","text","CardExcerpt","CardBadges","tags","_a","tag","Badge","CardPostMeta","date","formatedDate","CardEventMeta","startDateTime","endDateTime","onCampus","onCampusBuilding","onCampusRoomNumber","eventAddress","formatTime","hours","minutes","ampm","endDate","eventEndDate","isEventSameDay","isSameDay","singleDayEvent","multiDayEvent","multiDayDisplay","Fragment","ClockIcon","CalendarDaysIcon","MapPinIcon","CardPeopleMeta","jobTitle","email","phone","CardWrapper","isCenter","centerText","Card"],"mappings":"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"}