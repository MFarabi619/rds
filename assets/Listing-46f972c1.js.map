{"version":3,"file":"Listing-46f972c1.js","sources":["../../src/components/Listing/Listing.Styles.ts","../../src/components/Listing/ListingFigure.tsx","../../src/components/Listing/ListingContent.tsx","../../src/components/Listing/ListingDateBox.tsx","../../src/components/Listing/ListingHeader.tsx","../../src/components/Listing/ListingExcerpt.tsx","../../src/components/Listing/ListingBadges.tsx","../../src/components/Listing/ListingPostMeta.tsx","../../src/components/Listing/ListingEventMeta.tsx","../../src/components/Listing/ListingPeopleMeta.tsx","../../src/components/Listing/Listing.tsx"],"sourcesContent":["export const styles = {\n  base: `not-prose group relative overflow-hidden @container bg-white hover:bg-slate-50`,\n  content: `flex flex-1 flex-col gap-1.5 pr-6 md:gap-3.5`,\n  header: `text-lg font-semibold text-cu-black group-hover:text-cu-red @lg:md:text-xl @4xl:lg:text-2xl`,\n  excerpt: `text-sm text-cu-black-900 md:text-base @lg:md:text-lg`,\n  more: `font-semibold text-cu-red group-hover:text-cyan-700`,\n  badges: `mt-auto`,\n  arrowArea: `absolute -mt-3 top-1/2 right-4`,\n  arrowIcon: `flex-none w-6 h-6 ml-auto text-cu-black-300 group-hover:text-cu-red`,\n}\n\nexport const figureStyles = {\n  //   figure: `relative rounded-md overflow-hidden shadow-md`,\n  figure: `flex-none rounded-md`,\n  default: `max-w-[50%] @lg:md:max-w-[35%]`,\n  small: `max-w-[50%] @lg:md:max-w-[25%]`,\n}\n\nexport const metaStyles = {\n  wrapper: `flex flex-col flex-wrap gap-2`,\n  item: `text-sm text-cu-black-600 @2xl:md:text-base`,\n  itemLarge: `text-base text-cu-black-600 @sm:md:text-lg`,\n  italic: `italic`,\n  bold: `font-semibold text-cyan-600`,\n  alignIcon: `flex`,\n  redIcon: `mr-2 h-6 w-6 flex-shrink-0 text-cu-red-300`,\n}\n\nexport const eventStyles = {\n  dateBox: `h-20 w-20 @lg:lg:h-32 @lg:lg:w-32 flex-col items-center justify-center rounded-md bg-white shadow-md group-hover:bg-cu-red flex`,\n  dateBoxMonth: `text-xs @lg:lg:text-lg font-bold uppercase text-cu-red group-hover:text-white`,\n  dateBoxDay: `text-2xl @lg:lg:text-4xl font-bold uppercase text-cu-black-800 group-hover:text-white`,\n}\n","import React from 'react'\nimport { figureStyles } from './Listing.Styles'\n\nexport interface ListingFigureProps {\n  children: React.ReactNode\n  size?: 'small' | 'default'\n}\n\nexport const ListingFigure = ({ children, size = 'default' }: ListingFigureProps) => {\n  return <figure className={`cu-figure ${figureStyles.figure} ${figureStyles[size]}`}>{children}</figure>\n}\n\nListingFigure.displayName = 'Listing.Figure'\n","import React from 'react'\nimport { styles } from './Listing.Styles'\n\nexport interface ListingContentProps {\n  children: React.ReactNode\n}\n\nexport const ListingContent = ({ children }: ListingContentProps) => {\n  return <div className={`${styles.content}`}>{children}</div>\n}\n\nListingContent.displayName = 'Listing.Content'\n","import { getDate, parse, format } from 'date-fns'\nimport { eventStyles } from './Listing.Styles'\n\nexport interface ListingDateBoxProps {\n  startDate: string\n}\n\nexport const ListingDateBox = ({ startDate }: ListingDateBoxProps) => {\n  const eventStartDate = parse(startDate, 'yyyy-MM-dd HH:mm:ss', new Date())\n  const eventStartMonth = format(eventStartDate, 'MMM')\n  const eventStartDay = getDate(eventStartDate)\n\n  return (\n    <div className={eventStyles.dateBox}>\n      <p className={eventStyles.dateBoxMonth}>{eventStartMonth}</p>\n      <p className={eventStyles.dateBoxDay}>{eventStartDay}</p>\n    </div>\n  )\n}\n\nListingDateBox.displayName = 'Listing.DateBox'\n","import { styles } from './Listing.Styles'\n\nexport interface ListingHeaderProps {\n  text: string\n}\n\nexport const ListingHeader = ({ text }: ListingHeaderProps) => {\n  return <h3 className={styles.header}>{text}</h3>\n}\n\nListingHeader.displayName = 'Listing.Header'\n","import { styles } from './Listing.Styles'\n\nexport interface ListingExcerptProps {\n  text: string\n}\n\nexport const ListingExcerpt = ({ text }: ListingExcerptProps) => {\n  return (\n    <p className={styles.excerpt}>\n      {text.length > 170 ? `${text.substring(0, 170)}...` : text}\n      <span className={styles.more}> Read more</span>\n    </p>\n  )\n}\n\nListingExcerpt.displayName = 'Listing.Excerpt'\n","import { Badge } from '../Badge/Badge'\nimport { styles } from './Listing.Styles'\n\nexport interface ListingBadgesProps {\n  tags?: Tags\n}\n\ninterface Tags {\n  category: {\n    id: number\n    name: string\n    slug: string\n  }[]\n}\n\nexport const ListingBadges = ({ tags }: ListingBadgesProps) => {\n  return (\n    <div className={styles.badges}>\n      {tags?.category?.map((tag) => (\n        <Badge key={tag.id}>{tag.name}</Badge>\n      ))}\n    </div>\n  )\n}\n\nListingBadges.displayName = 'Listing.Badges'\n","import { metaStyles } from './Listing.Styles'\n\nexport interface ListingPostMetaProps {\n  date?: string | Date\n}\n\nexport const ListingPostMeta = ({ date }: ListingPostMetaProps) => {\n  const formatedDate = date\n    ? new Date(date).toLocaleString('en-US', {\n        month: 'long',\n        day: '2-digit',\n        year: 'numeric',\n      })\n    : null\n\n  return <time className={`${metaStyles.item} ${metaStyles.italic}`}>{formatedDate}</time>\n}\n\nListingPostMeta.displayName = 'Listing.PostMeta'\n","import { isSameDay, parse, format, getDate } from 'date-fns'\nimport { CalendarDaysIcon, ClockIcon, MapPinIcon } from '@heroicons/react/24/outline'\nimport { metaStyles } from './Listing.Styles'\n\nexport interface ListingEventMetaProps {\n  startDateTime: string\n  endDateTime: string\n  onCampus: boolean\n  onCampusBuilding?: string | null\n  onCampusRoomNumber?: string | null\n  eventAddress?: string\n}\n\nexport const ListingEventMeta = ({\n  startDateTime,\n  endDateTime,\n  onCampus,\n  onCampusBuilding,\n  onCampusRoomNumber,\n  eventAddress,\n}: ListingEventMetaProps) => {\n  // Get start date and time\n  const startDate = parse(startDateTime, 'yyyy-MM-dd HH:mm:ss', new Date())\n  const startMonth = format(startDate, 'MMMM')\n  const startDay = getDate(startDate)\n  const startHours = startDate.getHours() % 12 || 12\n  const startMinutes = format(startDate, 'mm')\n  const startAmPm = format(startDate, 'a')\n\n  // Get end date and time\n  const endDate = parse(endDateTime, 'yyyy-MM-dd HH:mm:ss', new Date())\n  const endMonth = format(endDate, 'MMMM')\n  const endDay = getDate(endDate)\n  const endHours = endDate.getHours() % 12 || 12\n  const endMinutes = format(endDate, 'mm')\n  const endAmPm = format(endDate, 'a')\n\n  // Set final meta\n  const startTime = `${startHours}:${startMinutes} ${startAmPm}`\n  const endTime = `${endHours}:${endMinutes} ${endAmPm}`\n\n  // Check if start and end date is the same\n  const isEventSameDay = isSameDay(startDate, endDate)\n\n  // Check if multiday\n  const multiDayDisplay = () => {\n    if (!isEventSameDay) {\n      return (\n        <>\n          <CalendarDaysIcon className={metaStyles.redIcon} aria-hidden=\"true\" />\n          {`${startMonth} ${startDay} — ${endMonth} ${endDay}`}\n        </>\n      )\n    } else {\n      return (\n        <>\n          <ClockIcon className={metaStyles.redIcon} aria-hidden=\"true\" />\n          {`${startTime} — ${endTime}`}\n        </>\n      )\n    }\n  }\n\n  return (\n    <ul className={metaStyles.wrapper}>\n      <li className={`${metaStyles.item} ${metaStyles.alignIcon}`}>{multiDayDisplay()}</li>\n      <li className={`${metaStyles.item} ${metaStyles.alignIcon}`}>\n        <MapPinIcon className={metaStyles.redIcon} aria-hidden=\"true\" />\n        {onCampus ? onCampusRoomNumber + ' ' + onCampusBuilding : eventAddress}\n      </li>\n    </ul>\n  )\n}\n\nListingEventMeta.displayName = 'Listing.EventMeta'\n","import { metaStyles } from './Listing.Styles'\n\nexport interface ListingPeopleMetaProps {\n  jobTitle?: string\n  email?: string\n  phone?: string\n}\n\nexport const ListingPeopleMeta = ({ jobTitle, email, phone }: ListingPeopleMetaProps) => {\n  return (\n    <ul className={metaStyles.wrapper}>\n      {jobTitle && <li className={`${metaStyles.itemLarge} ${metaStyles.italic}`}>{jobTitle}</li>}\n      {email && (\n        <li className={metaStyles.item}>\n          <strong className={metaStyles.bold}>{email}</strong>\n        </li>\n      )}\n      {phone && <li className={metaStyles.item}>{phone}</li>}\n    </ul>\n  )\n}\n\nListingPeopleMeta.displayName = 'Listing.PeopleMeta'\n","import React from 'react'\nimport { ChevronRightIcon } from '@heroicons/react/24/outline'\n\nimport { styles } from './Listing.Styles'\nimport { ListingFigure } from './ListingFigure'\nimport { ListingContent } from './ListingContent'\nimport { ListingDateBox } from './ListingDateBox'\nimport { ListingHeader } from './ListingHeader'\nimport { ListingExcerpt } from './ListingExcerpt'\nimport { ListingBadges } from './ListingBadges'\nimport { ListingPostMeta } from './ListingPostMeta'\nimport { ListingEventMeta } from './ListingEventMeta'\nimport { ListingPeopleMeta } from './ListingPeopleMeta'\n\nexport interface ListingProps {\n  children: React.ReactNode\n  noLink?: boolean\n}\n\nexport const ListingWrapper = ({ children, noLink }: ListingProps) => {\n  const addPadding = noLink ? 'p-8' : ''\n  return (\n    <li className={`cu-listing ${styles.base} ${addPadding}`}>\n      {children}\n      <div className={styles.arrowArea}>\n        <ChevronRightIcon className={styles.arrowIcon} aria-hidden=\"true\" />\n      </div>\n    </li>\n  )\n}\n\nexport const Listing = Object.assign(ListingWrapper, {\n  Figure: ListingFigure,\n  Content: ListingContent,\n  DateBox: ListingDateBox,\n  Header: ListingHeader,\n  Excerpt: ListingExcerpt,\n  Badges: ListingBadges,\n  PostMeta: ListingPostMeta,\n  EventMeta: ListingEventMeta,\n  PeopleMeta: ListingPeopleMeta,\n})\n"],"names":["styles","figureStyles","metaStyles","eventStyles","ListingFigure","children","size","jsx","ListingContent","ListingDateBox","startDate","eventStartDate","parse","eventStartMonth","format","eventStartDay","getDate","jsxs","ListingHeader","text","ListingExcerpt","ListingBadges","tags","_a","tag","Badge","ListingPostMeta","date","formatedDate","ListingEventMeta","startDateTime","endDateTime","onCampus","onCampusBuilding","onCampusRoomNumber","eventAddress","startMonth","startDay","startHours","startMinutes","startAmPm","endDate","endMonth","endDay","endHours","endMinutes","endAmPm","startTime","endTime","isEventSameDay","isSameDay","multiDayDisplay","Fragment","ClockIcon","CalendarDaysIcon","MapPinIcon","ListingPeopleMeta","jobTitle","email","phone","ListingWrapper","noLink","addPadding","ChevronRightIcon","Listing"],"mappings":"2RAAO,MAAMA,EAAS,CACpB,KAAM,iFACN,QAAS,+CACT,OAAQ,8FACR,QAAS,wDACT,KAAM,sDACN,OAAQ,UACR,UAAW,iCACX,UAAW,qEACb,EAEaC,EAAe,CAE1B,OAAQ,uBACR,QAAS,iCACT,MAAO,gCACT,EAEaC,EAAa,CACxB,QAAS,gCACT,KAAM,8CACN,UAAW,6CACX,OAAQ,SACR,KAAM,8BACN,UAAW,OACX,QAAS,4CACX,EAEaC,EAAc,CACzB,QAAS,kIACT,aAAc,gFACd,WAAY,uFACd,ECxBOC,EAAA,CAAA,CAAA,SAAAC,EAAA,KAAAC,EAAA,SAAA,IACLC,EAAA,SAAA,CAAA,UAAA,aAAAN,EAAA,UAAAA,EAAAK,CAAA,IAAA,SAAAD,CAAA,CAAA,EAGFD,EAAA,YAAA,wSCLO,MAAAI,EAAA,CAAA,CAAA,SAAAH,KACLE,EAAA,MAAA,CAAA,UAAA,GAAAP,EAAA,UAAA,SAAAK,CAAA,CAAA,EAGFG,EAAA,YAAA,gKCJO,MAAAC,EAAA,CAAA,CAAA,UAAAC,KAAA,CACL,MAAAC,EAAAC,EAAAF,EAAA,sBAAA,IAAA,IAAA,EACAG,EAAAC,EAAAH,EAAA,KAAA,EACAI,EAAAC,EAAAL,CAAA,EAEA,OAAAM,EAAA,MAAA,CAAA,UAAAd,EAAA,QAAA,SAAA,CAEII,EAAA,IAAA,CAAA,UAAAJ,EAAA,aAAA,SAAAU,EAAA,EAAyDN,EAAA,IAAA,CAAA,UAAAJ,EAAA,WAAA,SAAAY,EAAA,CACJ,CAAA,CAAA,CAG3D,EAEAN,EAAA,YAAA,8PCdO,MAAAS,EAAA,CAAA,CAAA,KAAAC,KACLZ,EAAA,KAAA,CAAA,UAAAP,EAAA,OAAA,SAAAmB,CAAA,CAAA,EAGFD,EAAA,YAAA,+OCJO,MAAAE,EAAA,CAAA,CAAA,KAAAD,KACLF,EAAA,IAAA,CAAA,UAAAjB,EAAA,QAAA,SAAA,CAEKmB,EAAA,OAAA,IAAA,GAAAA,EAAA,UAAA,EAAA,GAAA,OAAAA,EAAqDZ,EAAA,OAAA,CAAA,UAAAP,EAAA,KAAA,SAAA,aAAA,CACd,CAAA,CAAA,EAK9CoB,EAAA,YAAA,oPCAO,MAAAC,EAAA,CAAA,CAAA,KAAAC,KAAA,OACL,OAAAf,EAAA,MAAA,CAAA,UAAAP,EAAA,OAAA,UAAAuB,EAAAD,GAAA,YAAAA,EAAA,WAAA,YAAAC,EAAA,IAAAC,GAAAjB,EAAAkB,EAAA,CAAA,SAAAD,EAAA,IAAA,EAAAA,EAAA,EAAA,EAAA,CAAA,CAOF,EAEAH,EAAA,YAAA,6OCnBO,MAAAK,EAAA,CAAA,CAAA,KAAAC,KAAA,CACL,MAAAC,EAAAD,EAAA,IAAA,KAAAA,CAAA,EAAA,eAAA,QAAA,CAC2C,MAAA,OAC9B,IAAA,UACF,KAAA,SACC,CAAA,EAAA,KAIZ,OAAApB,EAAA,OAAA,CAAA,UAAA,GAAAL,EAAA,QAAAA,EAAA,SAAA,SAAA0B,CAAA,CAAA,CACF,EAEAF,EAAA,YAAA,gQCLO,MAAAG,EAAA,CAAA,CAA0B,cAAAC,EAC/B,YAAAC,EACA,SAAAC,EACA,iBAAAC,EACA,mBAAAC,EACA,aAAAC,CAEF,IAAA,CAEE,MAAAzB,EAAAE,EAAAkB,EAAA,sBAAA,IAAA,IAAA,EACAM,EAAAtB,EAAAJ,EAAA,MAAA,EACA2B,EAAArB,EAAAN,CAAA,EACA4B,EAAA5B,EAAA,SAAA,EAAA,IAAA,GACA6B,EAAAzB,EAAAJ,EAAA,IAAA,EACA8B,EAAA1B,EAAAJ,EAAA,GAAA,EAGA+B,EAAA7B,EAAAmB,EAAA,sBAAA,IAAA,IAAA,EACAW,EAAA5B,EAAA2B,EAAA,MAAA,EACAE,EAAA3B,EAAAyB,CAAA,EACAG,EAAAH,EAAA,SAAA,EAAA,IAAA,GACAI,EAAA/B,EAAA2B,EAAA,IAAA,EACAK,EAAAhC,EAAA2B,EAAA,GAAA,EAGAM,EAAA,GAAAT,KAAAC,KAAAC,IACAQ,EAAA,GAAAJ,KAAAC,KAAAC,IAGAG,EAAAC,EAAAxC,EAAA+B,CAAA,EAGAU,EAAA,IACEF,EAQEhC,EAAAmC,EAAA,CAAA,SAAA,CAEI7C,EAAA8C,EAAA,CAAA,UAAAnD,EAAA,QAAA,cAAA,OAAA,EAA6D,GAAA6C,OAAAC,GAC1C,CAAA,CAAA,EAVvB/B,EAAAmC,EAAA,CAAA,SAAA,CAEI7C,EAAA+C,EAAA,CAAA,UAAApD,EAAA,QAAA,cAAA,OAAA,EAAoE,GAAAkC,KAAAC,OAAAK,KAAAC,GACxB,CAAA,CAAA,EAapD,OAAA1B,EAAA,KAAA,CAAA,UAAAf,EAAA,QAAA,SAAA,CAEIK,EAAA,KAAA,CAAA,UAAA,GAAAL,EAAA,QAAAA,EAAA,YAAA,SAAAiD,EAAA,CAAA,CAAA,EAAgFlC,EAAA,KAAA,CAAA,UAAA,GAAAf,EAAA,QAAAA,EAAA,YAAA,SAAA,CAE9EK,EAAAgD,EAAA,CAAA,UAAArD,EAAA,QAAA,cAAA,OAAA,EAA8D8B,EAAAE,EAAA,IAAAD,EAAAE,CACJ,EAAA,CAC5D,CAAA,CAAA,CAGN,EAEAN,EAAA,YAAA,kyBClEO,MAAA2B,EAAA,CAAA,CAAA,SAAAC,EAAA,MAAAC,EAAA,MAAAC,CAAA,IACL1C,EAAA,KAAA,CAAA,UAAAf,EAAA,QAAA,SAAA,CAEKuD,GAAAlD,EAAA,KAAA,CAAA,UAAA,GAAAL,EAAA,aAAAA,EAAA,SAAA,SAAAuD,CAAA,CAAA,EAAqFC,GAAAnD,EAAA,KAAA,CAAA,UAAAL,EAAA,KAAA,SAAAK,EAAA,SAAA,CAAA,UAAAL,EAAA,KAAA,SAAAwD,CAAA,CAAA,EAAA,EAIpFC,GAAApD,EAAA,KAAA,CAAA,UAAAL,EAAA,KAAA,SAAAyD,EAAA,CAE+C,CAAA,CAAA,EAKvDH,EAAA,YAAA,ybCHO,MAAAI,EAAA,CAAA,CAAA,SAAAvD,EAAA,OAAAwD,KAAA,CACL,MAAAC,EAAAD,EAAA,MAAA,GACA,OAAA5C,EAAA,KAAA,CAAA,UAAA,cAAAjB,EAAA,QAAA8D,IAAA,SAAA,CAEKzD,EAAAE,EAAA,MAAA,CAAA,UAAAP,EAAA,UAAA,SAAAO,EAAAwD,EAAA,CAAA,UAAA/D,EAAA,UAAA,cAAA,MAAA,CAAA,EAAA,CAGD,CAAA,CAAA,CAGN,EAEOgE,EAAA,OAAA,OAAAJ,EAAA,CAA8C,OAAAxD,EAC3C,QAAAI,EACC,QAAAC,EACA,OAAAS,EACD,QAAAE,EACC,OAAAC,EACD,SAAAK,EACE,UAAAG,EACC,WAAA2B,CAEb,CAAA"}