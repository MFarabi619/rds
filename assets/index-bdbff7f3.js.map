{"version":3,"file":"index-bdbff7f3.js","sources":["../../node_modules/date-fns/esm/parseISO/index.js"],"sourcesContent":["import { millisecondsInHour, millisecondsInMinute } from \"../constants/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, options) {\n  var _options$additionalDi;\n\n  requiredArgs(1, arguments);\n  var additionalDigits = toInteger((_options$additionalDi = options === null || options === void 0 ? void 0 : options.additionalDigits) !== null && _options$additionalDi !== void 0 ? _options$additionalDi : 2);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (!date || isNaN(date.getTime())) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time)) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: NaN,\n    restDateString: ''\n  };\n  var year = captures[1] ? parseInt(captures[1]) : null;\n  var century = captures[2] ? parseInt(captures[2]) : null; // either year or century is null, not both\n\n  return {\n    year: century === null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return new Date(NaN);\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return new Date(NaN);\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return NaN; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}"],"names":["parseISO","argument","options","_options$additionalDi","requiredArgs","additionalDigits","toInteger","dateStrings","splitDateString","date","parseYearResult","parseYear","parseDate","timestamp","time","offset","parseTime","parseTimezone","dirtyDate","result","patterns","dateRegex","timeRegex","timezoneRegex","dateString","array","timeString","token","regex","captures","year","century","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","validateWeekDate","dayOfISOWeekYear","validateDate","validateDayOfYearDate","value","hours","parseTimeUnit","minutes","seconds","validateTime","millisecondsInHour","millisecondsInMinute","timezoneString","sign","validateTimezone","isoWeekYear","fourthOfJanuaryDay","diff","daysInMonths","isLeapYearIndex","_year","_hours"],"mappings":"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","x_google_ignoreList":[0]}