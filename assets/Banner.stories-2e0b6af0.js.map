{"version":3,"file":"Banner.stories-2e0b6af0.js","sources":["../../src/components/Banner/Banner.Animated.tsx","../../src/components/Banner/Banner.tsx","../../src/stories/Banner.stories.tsx"],"sourcesContent":["import { useRef } from 'react'\n// import { useEffect, useRef } from 'react'\n// import { Animation } from './Animation/Animation.js'\n\nexport const BannerAnimated = () => {\n  //   const gradient = new Animation()\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  const divStyle = {\n    '--gradient-color-1': '#c3e4ff',\n    '--gradient-color-2': '#6ec3f4',\n    '--gradient-color-3': '#eae2ff',\n    '--gradient-color-4': '#b9beff',\n  }\n\n  //   useEffect(() => {\n  //     if (canvasRef.current) {\n  //       gradient.initGradient(canvasRef.current)\n  //     }\n  //   }, [canvasRef, gradient])\n\n  return (\n    <canvas\n      //   ref={canvasRef}\n      ref={canvasRef}\n      style={{\n        width: '100%',\n        height: '100%',\n        position: 'absolute',\n        top: 'auto',\n        left: '0',\n        bottom: '0',\n        overflow: 'hidden',\n        opacity: 0.5,\n        ...divStyle,\n      }}\n      data-transition-in\n    />\n  )\n}\n","import React from 'react'\nimport { rdsFontSizes, rdsMaxWidth } from '../../utils/tailwindClasses'\nimport { BannerAnimated } from './Banner.Animated'\n\nexport interface BannerProps {\n  children?: React.ReactNode\n  title?: string\n  paragraph?: string\n  fontSize?: '5xl' | '6xl'\n  maxWidth?: 'none' | 'full' | '5xl' | '7xl'\n  isType?: 'light-grey' | 'light-fade' | 'dark-wave' | 'red-wave' | 'image' | 'animated'\n  align?: 'center' | 'left'\n  hasOverlap?: boolean\n  image?: string\n  imageAlt?: string\n}\n\nexport interface BannerImgProps {\n  image?: string\n  imageAlt?: string\n}\n\nconst styles = {\n  core: `not-prose relative py-16 md:py-32 md:flex md:items-center md:px-8 md:min-h-[240px]`,\n  buttonWrapper: `flex gap-6 flex-wrap md:flex-1`,\n  overlap: `md:pb-32 md:pt-20`,\n}\n\nconst typeStyles = {\n  'light-grey': `bg-cu-black-50 text-cu-black-800`,\n  'light-fade': `bg-gradient-to-b from-white to-cu-black-50 text-cu-black-800`,\n  'dark-wave': `bg-cu-black-800 text-white`,\n  'red-wave': `bg-gradient-to-b from-cu-red to-cu-red-900 text-white`,\n  animated: `bg-white text-cu-black-800`,\n  image: `bg-cu-black-800 text-white md:py-48`,\n}\n\nconst contentStyles = {\n  title: `font-semibold text-3xl`,\n  paragraph: `text-base lg:text-xl max-w-5xl`,\n}\n\nconst BannerBase = ({\n  children,\n  title,\n  paragraph,\n  maxWidth = '5xl',\n  isType = 'light-grey',\n  fontSize = '5xl',\n  align = 'center',\n  hasOverlap,\n  image,\n  imageAlt = 'Decorative background image',\n}: BannerProps & BannerImgProps) => {\n  const bannerSpacing = isType === 'image' ? 'md:py-48' : 'md:py-32'\n\n  const flexAlign =\n    align === 'center'\n      ? 'flex-col last:[&>*]:justify-center'\n      : 'flex-col md:flex-row last:[&>*]:justify-center last:md:[&>*]:justify-end'\n\n  const hasParaAndButtons = paragraph && children ? ' md:max-w-3xl md:w-8/12' : ''\n\n  const contentAlign = align === 'center' ? 'text-center' : 'text-center md:text-left' + hasParaAndButtons\n\n  let overlapStyles = hasOverlap ? styles.overlap : ''\n\n  if (hasOverlap && isType === 'image') {\n    overlapStyles = 'md:pb-48 md:pt-40'\n  }\n\n  //   const overlapStyles2 =\n  //     hasOverlap && isType !== image ? styles.overlap : 'md:pb-48';\n\n  //   alert(overlapStyles);\n\n  return (\n    <>\n      <header className={`${styles.core} ${typeStyles[isType]} ${bannerSpacing} ${overlapStyles}`} id=\"banner\">\n        <div\n          className={`z-10 flex flex-1 ${flexAlign} m-auto items-center justify-center gap-8 ${rdsMaxWidth[maxWidth]} [&>*]:z-10`}\n        >\n          <div className={`flex flex-auto flex-col gap-6 ${contentAlign}`}>\n            <h1 className={`${contentStyles.title} ${rdsFontSizes[fontSize]}`}>{title}</h1>\n            {paragraph && <p className={contentStyles.paragraph}>{paragraph}</p>}\n          </div>\n          {children}\n        </div>\n\n        {isType === 'image' && <BannerImg image={image} imageAlt={imageAlt} />}\n        {isType === 'dark-wave' && <BannerWave />}\n        {isType === 'red-wave' && <BannerWave />}\n        {isType === 'animated' && <BannerAnimated />}\n      </header>\n    </>\n  )\n}\n\nconst BannerImg = ({ image, imageAlt }: BannerImgProps) => {\n  return (\n    <div className=\"absolute inset-0\">\n      <img className=\"h-full w-full object-cover\" src={image} alt={imageAlt} />\n      <div className=\"absolute inset-0 bg-cu-black-800 mix-blend-multiply\" aria-hidden=\"true\" />\n    </div>\n  )\n}\n\nconst BannerWave = () => {\n  return <div className=\"absolute inset-0 bg-cu-waves-white-10 bg-contain bg-bottom bg-no-repeat md:bg-cover\"></div>\n}\n\nconst ButtonGroup = ({ children }: BannerProps) => {\n  return <div className={`buttons ${styles.buttonWrapper}`}>{children}</div>\n}\n\nexport const Banner = Object.assign(BannerBase, {\n  ButtonGroup,\n})\n\nBannerBase.displayName = 'Banner'\nButtonGroup.displayName = 'Banner.ButtonGroup'\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport type { Meta, StoryObj } from '@storybook/react';\nimport { Banner } from '../components/Banner/Banner';\nimport { Button } from '../components/Button/Button';\nimport { Main } from '../layouts/Main/Main';\nimport { Column } from '../layouts/Column/Column';\nconst meta: Meta<typeof Banner> = {\n  title: 'Headers/Banner',\n  component: Banner,\n  tags: ['autodocs'],\n  parameters: {\n    controls: {\n      sort: 'requiredFirst'\n    }\n  }\n};\nexport default meta;\ntype Story = StoryObj<typeof Banner>;\nexport const DefaultTemplate: Story = {};\nDefaultTemplate.args = {\n  children: 'Header Banner',\n  title: 'Basic Banner'\n};\nexport const WithButtonsTemplate: Story = {\n  render: () => <Banner title=\"Header Banner\">\n      <Banner.ButtonGroup>\n        <Button isType=\"default\" onClick={() => {}} title=\"Primary Button\" hasShadow />\n        <Button isType=\"white\" onClick={() => {}} title=\"Secondary Button\" hasShadow />\n        <Button hasShadow icon=\"StarIcon\" isType=\"dark-grey\" onClick={() => {\n        alert('Add to favs clicked');\n      }} title=\"Add to Favs\" />\n      </Banner.ButtonGroup>\n    </Banner>\n};\nexport const WithImageTemplate: Story = {\n  render: () => <Banner title=\"Image Banner\" isType=\"image\" image=\"https://carleton.ca/about/wp-content/uploads/about-header-1600w-3.jpg\">\n      <Banner.ButtonGroup>\n        <Button isType=\"default\" onClick={() => {}} title=\"Primary Button\" hasShadow />\n        <Button isType=\"white\" onClick={() => {}} title=\"Secondary Button\" hasShadow />\n        <Button hasShadow icon=\"StarIcon\" isType=\"dark-grey\" onClick={() => {\n        alert('Add to favs clicked');\n      }} title=\"Add to Favs\" />\n      </Banner.ButtonGroup>\n    </Banner>\n};\nexport const WithGreyGradientTemplate: Story = {\n  render: () => <Banner title=\"CU Light Fade Banner\" isType=\"light-fade\">\n      <Banner.ButtonGroup>\n        <Button isType=\"default\" onClick={() => {}} title=\"Primary Button\" hasShadow />\n        <Button isType=\"white\" onClick={() => {}} title=\"Secondary Button\" hasShadow />\n        <Button hasShadow icon=\"StarIcon\" isType=\"dark-grey\" onClick={() => {\n        alert('Add to favs clicked');\n      }} title=\"Add to Favs\" />\n      </Banner.ButtonGroup>\n    </Banner>\n};\nexport const WithDarkWaveTemplate: Story = {\n  render: () => <Banner title=\"CU Wave Banner\" isType=\"dark-wave\">\n      <Banner.ButtonGroup>\n        <Button isType=\"default\" onClick={() => {}} title=\"Primary Button\" hasShadow />\n        <Button isType=\"white\" onClick={() => {}} title=\"Secondary Button\" hasShadow />\n        <Button hasShadow icon=\"StarIcon\" isType=\"dark-grey\" onClick={() => {\n        alert('Add to favs clicked');\n      }} title=\"Add to Favs\" />\n      </Banner.ButtonGroup>\n    </Banner>\n};\nexport const WithRedWaveTemplate: Story = {\n  render: () => <Banner title=\"CU Wave Banner\" isType=\"red-wave\">\n      <Banner.ButtonGroup>\n        <Button isType=\"default\" onClick={() => {}} title=\"Primary Button\" hasShadow />\n        <Button isType=\"white\" onClick={() => {}} title=\"Secondary Button\" hasShadow />\n        <Button hasShadow icon=\"StarIcon\" isType=\"dark-grey\" onClick={() => {\n        alert('Add to favs clicked');\n      }} title=\"Add to Favs\" />\n      </Banner.ButtonGroup>\n    </Banner>\n};\nexport const WithAnimationTemplate: Story = {\n  render: () => <Banner title=\"CU Animated Banner\" isType=\"animated\">\n      <Banner.ButtonGroup>\n        <Button isType=\"default\" onClick={() => {}} title=\"Primary Button\" hasShadow />\n        <Button isType=\"white\" onClick={() => {}} title=\"Secondary Button\" hasShadow />\n        <Button hasShadow icon=\"StarIcon\" isType=\"dark-grey\" onClick={() => {\n        alert('Add to favs clicked');\n      }} title=\"Add to Favs\" />\n      </Banner.ButtonGroup>\n    </Banner>\n};\nexport const WithParagraphTemplate: Story = {\n  render: () => <Banner title=\"Banner with Paragraph\" paragraph=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin tristique ultrices magna at sollicitudin. Duis venenatis arcu quis nibh blandit vestibulum. Praesent tempus est at venenatis elementum. In vestibulum purus in sapien varius, ac iaculis ligula eleifend. Nulla tempus interdum ipsum quis iaculis.\">\n      <Banner.ButtonGroup>\n        <Button isType=\"default\" onClick={() => {}} title=\"Primary Button\" hasShadow />\n        <Button isType=\"white\" onClick={() => {}} title=\"Secondary Button\" hasShadow />\n        <Button hasShadow icon=\"StarIcon\" isType=\"dark-grey\" onClick={() => {\n        alert('Add to favs clicked');\n      }} title=\"Add to Favs\" />\n      </Banner.ButtonGroup>\n    </Banner>\n};\nexport const WithOverlapTemplate: Story = {\n  render: () => <>\n      <Banner title=\"Banner with Content Overlap\" isType=\"animated\" hasOverlap />\n      <Main hasOverlap>\n        <Column maxWidth=\"5xl\">\n          <div className=\"rounded-lg bg-white px-8 pt-6 pb-24\">\n            This is an example of the main wrapped overlapping the banner\n          </div>\n        </Column>\n      </Main>\n    </>\n};\nexport const WithOverlapImageTemplate: Story = {\n  render: () => <>\n      <Banner title=\"Banner Image with Content Overlap\" isType=\"image\" image=\"https://carleton.ca/about/wp-content/uploads/about-header-1600w-3.jpg\" hasOverlap />\n      <Main hasOverlap>\n        <Column maxWidth=\"5xl\">\n          <div className=\"rounded-lg bg-white px-8 pt-6 pb-24\">\n            This is an example of the main wrapped overlapping the banner\n          </div>\n        </Column>\n      </Main>\n    </>\n};\nDefaultTemplate.parameters = {\n  ...DefaultTemplate.parameters,\n  docs: {\n    ...DefaultTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{}\",\n      ...DefaultTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithButtonsTemplate.parameters = {\n  ...WithButtonsTemplate.parameters,\n  docs: {\n    ...WithButtonsTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <Banner title=\\\"Header Banner\\\">\\n      <Banner.ButtonGroup>\\n        <Button isType=\\\"default\\\" onClick={() => {}} title=\\\"Primary Button\\\" hasShadow />\\n        <Button isType=\\\"white\\\" onClick={() => {}} title=\\\"Secondary Button\\\" hasShadow />\\n        <Button hasShadow icon=\\\"StarIcon\\\" isType=\\\"dark-grey\\\" onClick={() => {\\n        alert('Add to favs clicked');\\n      }} title=\\\"Add to Favs\\\" />\\n      </Banner.ButtonGroup>\\n    </Banner>\\n}\",\n      ...WithButtonsTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithImageTemplate.parameters = {\n  ...WithImageTemplate.parameters,\n  docs: {\n    ...WithImageTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <Banner title=\\\"Image Banner\\\" isType=\\\"image\\\" image=\\\"https://carleton.ca/about/wp-content/uploads/about-header-1600w-3.jpg\\\">\\n      <Banner.ButtonGroup>\\n        <Button isType=\\\"default\\\" onClick={() => {}} title=\\\"Primary Button\\\" hasShadow />\\n        <Button isType=\\\"white\\\" onClick={() => {}} title=\\\"Secondary Button\\\" hasShadow />\\n        <Button hasShadow icon=\\\"StarIcon\\\" isType=\\\"dark-grey\\\" onClick={() => {\\n        alert('Add to favs clicked');\\n      }} title=\\\"Add to Favs\\\" />\\n      </Banner.ButtonGroup>\\n    </Banner>\\n}\",\n      ...WithImageTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithGreyGradientTemplate.parameters = {\n  ...WithGreyGradientTemplate.parameters,\n  docs: {\n    ...WithGreyGradientTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <Banner title=\\\"CU Light Fade Banner\\\" isType=\\\"light-fade\\\">\\n      <Banner.ButtonGroup>\\n        <Button isType=\\\"default\\\" onClick={() => {}} title=\\\"Primary Button\\\" hasShadow />\\n        <Button isType=\\\"white\\\" onClick={() => {}} title=\\\"Secondary Button\\\" hasShadow />\\n        <Button hasShadow icon=\\\"StarIcon\\\" isType=\\\"dark-grey\\\" onClick={() => {\\n        alert('Add to favs clicked');\\n      }} title=\\\"Add to Favs\\\" />\\n      </Banner.ButtonGroup>\\n    </Banner>\\n}\",\n      ...WithGreyGradientTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithDarkWaveTemplate.parameters = {\n  ...WithDarkWaveTemplate.parameters,\n  docs: {\n    ...WithDarkWaveTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <Banner title=\\\"CU Wave Banner\\\" isType=\\\"dark-wave\\\">\\n      <Banner.ButtonGroup>\\n        <Button isType=\\\"default\\\" onClick={() => {}} title=\\\"Primary Button\\\" hasShadow />\\n        <Button isType=\\\"white\\\" onClick={() => {}} title=\\\"Secondary Button\\\" hasShadow />\\n        <Button hasShadow icon=\\\"StarIcon\\\" isType=\\\"dark-grey\\\" onClick={() => {\\n        alert('Add to favs clicked');\\n      }} title=\\\"Add to Favs\\\" />\\n      </Banner.ButtonGroup>\\n    </Banner>\\n}\",\n      ...WithDarkWaveTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithRedWaveTemplate.parameters = {\n  ...WithRedWaveTemplate.parameters,\n  docs: {\n    ...WithRedWaveTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <Banner title=\\\"CU Wave Banner\\\" isType=\\\"red-wave\\\">\\n      <Banner.ButtonGroup>\\n        <Button isType=\\\"default\\\" onClick={() => {}} title=\\\"Primary Button\\\" hasShadow />\\n        <Button isType=\\\"white\\\" onClick={() => {}} title=\\\"Secondary Button\\\" hasShadow />\\n        <Button hasShadow icon=\\\"StarIcon\\\" isType=\\\"dark-grey\\\" onClick={() => {\\n        alert('Add to favs clicked');\\n      }} title=\\\"Add to Favs\\\" />\\n      </Banner.ButtonGroup>\\n    </Banner>\\n}\",\n      ...WithRedWaveTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithAnimationTemplate.parameters = {\n  ...WithAnimationTemplate.parameters,\n  docs: {\n    ...WithAnimationTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <Banner title=\\\"CU Animated Banner\\\" isType=\\\"animated\\\">\\n      <Banner.ButtonGroup>\\n        <Button isType=\\\"default\\\" onClick={() => {}} title=\\\"Primary Button\\\" hasShadow />\\n        <Button isType=\\\"white\\\" onClick={() => {}} title=\\\"Secondary Button\\\" hasShadow />\\n        <Button hasShadow icon=\\\"StarIcon\\\" isType=\\\"dark-grey\\\" onClick={() => {\\n        alert('Add to favs clicked');\\n      }} title=\\\"Add to Favs\\\" />\\n      </Banner.ButtonGroup>\\n    </Banner>\\n}\",\n      ...WithAnimationTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithParagraphTemplate.parameters = {\n  ...WithParagraphTemplate.parameters,\n  docs: {\n    ...WithParagraphTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <Banner title=\\\"Banner with Paragraph\\\" paragraph=\\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin tristique ultrices magna at sollicitudin. Duis venenatis arcu quis nibh blandit vestibulum. Praesent tempus est at venenatis elementum. In vestibulum purus in sapien varius, ac iaculis ligula eleifend. Nulla tempus interdum ipsum quis iaculis.\\\">\\n      <Banner.ButtonGroup>\\n        <Button isType=\\\"default\\\" onClick={() => {}} title=\\\"Primary Button\\\" hasShadow />\\n        <Button isType=\\\"white\\\" onClick={() => {}} title=\\\"Secondary Button\\\" hasShadow />\\n        <Button hasShadow icon=\\\"StarIcon\\\" isType=\\\"dark-grey\\\" onClick={() => {\\n        alert('Add to favs clicked');\\n      }} title=\\\"Add to Favs\\\" />\\n      </Banner.ButtonGroup>\\n    </Banner>\\n}\",\n      ...WithParagraphTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithOverlapTemplate.parameters = {\n  ...WithOverlapTemplate.parameters,\n  docs: {\n    ...WithOverlapTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <>\\n      <Banner title=\\\"Banner with Content Overlap\\\" isType=\\\"animated\\\" hasOverlap />\\n      <Main hasOverlap>\\n        <Column maxWidth=\\\"5xl\\\">\\n          <div className=\\\"rounded-lg bg-white px-8 pt-6 pb-24\\\">\\n            This is an example of the main wrapped overlapping the banner\\n          </div>\\n        </Column>\\n      </Main>\\n    </>\\n}\",\n      ...WithOverlapTemplate.parameters?.docs?.source\n    }\n  }\n};\nWithOverlapImageTemplate.parameters = {\n  ...WithOverlapImageTemplate.parameters,\n  docs: {\n    ...WithOverlapImageTemplate.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => <>\\n      <Banner title=\\\"Banner Image with Content Overlap\\\" isType=\\\"image\\\" image=\\\"https://carleton.ca/about/wp-content/uploads/about-header-1600w-3.jpg\\\" hasOverlap />\\n      <Main hasOverlap>\\n        <Column maxWidth=\\\"5xl\\\">\\n          <div className=\\\"rounded-lg bg-white px-8 pt-6 pb-24\\\">\\n            This is an example of the main wrapped overlapping the banner\\n          </div>\\n        </Column>\\n      </Main>\\n    </>\\n}\",\n      ...WithOverlapImageTemplate.parameters?.docs?.source\n    }\n  }\n};"],"names":["BannerAnimated","canvasRef","useRef","jsx","styles","typeStyles","contentStyles","BannerBase","children","title","paragraph","maxWidth","isType","fontSize","align","hasOverlap","image","imageAlt","bannerSpacing","flexAlign","contentAlign","overlapStyles","Fragment","jsxs","rdsMaxWidth","rdsFontSizes","BannerImg","BannerWave","ButtonGroup","Banner","meta","DefaultTemplate","WithButtonsTemplate","Button","WithImageTemplate","WithGreyGradientTemplate","WithDarkWaveTemplate","WithRedWaveTemplate","WithAnimationTemplate","WithParagraphTemplate","WithOverlapTemplate","Main","Column","WithOverlapImageTemplate","_a","_c","_b"],"mappings":"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"}