{"version":3,"file":"EventItem.stories-30ac9206.js","sources":["../../src/components/Listings_Deprecated/EventItem/EventItem.tsx"],"sourcesContent":["import React from 'react'\nimport { Link } from '../../Link/Link'\nimport { CalendarDaysIcon, MapPinIcon, ChevronRightIcon, ClockIcon } from '@heroicons/react/24/outline'\nimport { isSameDay, getDate, parse, format } from 'date-fns'\nimport { Badge } from '../../Badge/Badge'\n\n// Set types for as props\ntype BaseItemTypeProps = 'li' | 'div'\ntype TitleTypeProps = 'h2' | 'h3'\n\ninterface Tags {\n  category: { id: number; name: string; slug: string }[]\n  audience: { id: number; name: string; slug: string }[]\n}\nexport interface EventItemProps {\n  children?: React.ReactNode\n  fontSize?: 'base' | 'lg' | 'xl'\n  title?: string\n  link?: string\n  startDateTime: string\n  endDateTime: string\n  featuredImage?: string\n  description?: string\n  on_campus?: boolean\n  on_campus_building?: string | null\n  on_campus_room_number?: string | null\n  event_address?: string\n  tags?: Tags\n}\n\nexport interface ItemBaseProps {\n  as?: keyof JSX.IntrinsicElements\n}\n\nexport interface BaseItemProps {\n  as?: BaseItemTypeProps\n}\n\nexport interface TitleProps {\n  as?: TitleTypeProps\n}\n\nexport const EventItem = ({\n  as: Component = 'div',\n  link,\n  title,\n  startDateTime,\n  endDateTime,\n  featuredImage,\n  on_campus,\n  on_campus_building,\n  on_campus_room_number,\n  event_address,\n  tags,\n}: ItemBaseProps & EventItemProps) => {\n  const defaultImage =\n    'https://images.unsplash.com/photo-1496128858413-b36217c2ce36?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1200&amp;q=80'\n\n  // Get start date and time\n  const startDate = parse(startDateTime, 'yyyy-MM-dd HH:mm:ss', new Date())\n  const startMonth = format(startDate, 'MMMM')\n  const startDay = getDate(startDate)\n  const startHours = startDate.getHours() % 12 || 12\n  const startMinutes = format(startDate, 'mm')\n  const startAmPm = format(startDate, 'a')\n\n  // Get end date and time\n  const endDate = parse(endDateTime, 'yyyy-MM-dd HH:mm:ss', new Date())\n  const endMonth = format(endDate, 'MMMM')\n  const endDay = getDate(endDate)\n  const endHours = endDate.getHours() % 12 || 12\n  const endMinutes = format(endDate, 'mm')\n  const endAmPm = format(endDate, 'a')\n\n  // Set final meta\n  const startTime = `${startHours}:${startMinutes} ${startAmPm}`\n  const endTime = `${endHours}:${endMinutes} ${endAmPm}`\n\n  // Check if start and end date is the same\n  const isEventSameDay = isSameDay(startDate, endDate)\n\n  // Datebox values\n  const eventStartMonth = format(startDate, 'MMM')\n  const eventStartDay = getDate(startDate)\n\n  // Check if multiday\n  const multiDayDisplay = () => {\n    if (!isEventSameDay) {\n      return (\n        <>\n          <CalendarDaysIcon className=\"mr-2 h-6 w-6 flex-shrink-0 text-cu-red-300\" aria-hidden=\"true\" />\n          {`${startMonth} ${startDay} — ${endMonth} ${endDay}`}\n        </>\n      )\n    } else {\n      return (\n        <>\n          <ClockIcon className=\"mr-2 h-6 w-6 flex-shrink-0 text-cu-red-300\" aria-hidden=\"true\" />\n          {`${startTime} — ${endTime}`}\n        </>\n      )\n    }\n  }\n\n  return (\n    <Component className=\"not-prose group relative @container\">\n      <Link\n        href={link}\n        className=\"group relative flex h-full cursor-pointer flex-col gap-6 bg-white p-6 hover:bg-slate-50 focus:outline-none @xl:md:flex-row @2xl:lg:gap-8\"\n      >\n        <div className=\"relative hidden max-w-[40%] md:block\">\n          <img\n            className=\"hidden w-full rounded-md object-cover @4xl:lg:block\"\n            src={featuredImage ? featuredImage : defaultImage}\n            alt=\"\"\n          />\n          <div className=\"hidden h-20 w-20 flex-col items-center justify-center rounded-md bg-white shadow-md group-hover:bg-cu-red md:flex @4xl:lg:hidden\">\n            <p className=\"text-xs font-bold uppercase text-cu-red group-hover:text-white\">{eventStartMonth}</p>\n            <p className=\"text-2xl font-bold uppercase text-cu-black-800 group-hover:text-white\">{eventStartDay}</p>\n          </div>\n        </div>\n\n        <div className=\"flex flex-1 flex-col gap-1.5 pr-6 md:gap-3.5 @lg:md:pt-1.5\">\n          <h3 className=\"text-lg font-semibold text-cu-black group-hover:text-cu-red @lg:md:text-xl @4xl:lg:text-2xl\">\n            {title}\n          </h3>\n\n          <ul className=\"flex flex-col flex-wrap gap-2\">\n            <li className=\"flex items-center text-sm text-cu-black-700 @2xl:lg:text-base\">{multiDayDisplay()}</li>\n            <li className=\"flex items-start text-sm text-cu-black-700 @2xl:lg:text-base\">\n              <MapPinIcon className=\"mr-2 h-6 w-6 flex-shrink-0 text-cu-red-300\" />\n              {on_campus ? on_campus_room_number + ', ' + on_campus_building : event_address}\n            </li>\n          </ul>\n\n          <div className=\"mt-auto\">\n            {tags?.category?.map((tag) => (\n              <Badge key={tag.id}>{tag.name}</Badge>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"absolute right-4 top-1/2 -mt-3\">\n          <ChevronRightIcon\n            className=\"ml-auto h-6 w-6 flex-none text-cu-black-300 group-hover:text-cu-red\"\n            aria-hidden=\"true\"\n          />\n        </div>\n      </Link>\n    </Component>\n  )\n}\n"],"names":["EventItem","Component","link","title","startDateTime","endDateTime","featuredImage","on_campus","on_campus_building","on_campus_room_number","event_address","tags","defaultImage","startDate","parse","startMonth","format","startDay","getDate","startHours","startMinutes","startAmPm","endDate","endMonth","endDay","endHours","endMinutes","endAmPm","startTime","endTime","isEventSameDay","isSameDay","eventStartMonth","eventStartDay","multiDayDisplay","jsxs","Fragment","jsx","ClockIcon","CalendarDaysIcon","Link","MapPinIcon","_a","tag","Badge","ChevronRightIcon"],"mappings":"wpBA0CO,MAAAA,EAAA,CAAA,CAAmB,GAAAC,EAAA,MACR,KAAAC,EAChB,MAAAC,EACA,cAAAC,EACA,YAAAC,EACA,cAAAC,EACA,UAAAC,EACA,mBAAAC,EACA,sBAAAC,EACA,cAAAC,EACA,KAAAC,CAEF,IAAA,OACE,MAAAC,EAAA,6JAIAC,EAAAC,EAAAV,EAAA,sBAAA,IAAA,IAAA,EACAW,EAAAC,EAAAH,EAAA,MAAA,EACAI,EAAAC,EAAAL,CAAA,EACAM,EAAAN,EAAA,SAAA,EAAA,IAAA,GACAO,EAAAJ,EAAAH,EAAA,IAAA,EACAQ,EAAAL,EAAAH,EAAA,GAAA,EAGAS,EAAAR,EAAAT,EAAA,sBAAA,IAAA,IAAA,EACAkB,EAAAP,EAAAM,EAAA,MAAA,EACAE,EAAAN,EAAAI,CAAA,EACAG,EAAAH,EAAA,SAAA,EAAA,IAAA,GACAI,EAAAV,EAAAM,EAAA,IAAA,EACAK,EAAAX,EAAAM,EAAA,GAAA,EAGAM,EAAA,GAAAT,KAAAC,KAAAC,IACAQ,EAAA,GAAAJ,KAAAC,KAAAC,IAGAG,EAAAC,GAAAlB,EAAAS,CAAA,EAGAU,EAAAhB,EAAAH,EAAA,KAAA,EACAoB,EAAAf,EAAAL,CAAA,EAGAqB,GAAA,IACEJ,EAQEK,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEIC,EAAA,IAAAC,GAAA,CAAA,UAAA,6CAAA,cAAA,OAAA,EAAqF,GAAAV,OAAAC,GAClE,CAAA,CAAA,EAVvBM,EAAA,KAAAC,WAAA,CAAA,SAAA,CAEIC,EAAA,IAAAE,GAAA,CAAA,UAAA,6CAAA,cAAA,OAAA,EAA4F,GAAAxB,KAAAE,OAAAM,KAAAC,GAChD,CAAA,CAAA,EAapD,OAAAa,EAAAA,IAAApC,EAAA,CAAA,UAAA,sCAAA,SAAAkC,EAAA,KAEIK,GAAC,CAAA,KAAAtC,EACO,UAAA,2IACI,SAAA,CAEViC,EAAAA,KAAA,MAAA,CAAA,UAAA,uCAAA,SAAA,CACEE,EAAA,IAAA,MAAC,CAAA,UAAA,sDACW,IAAA/B,GAAAM,EAC2B,IAAA,EACjC,CAAA,EACNuB,EAAAA,KAAA,MAAA,CAAA,UAAA,mIAAA,SAAA,CAEEE,EAAA,IAAA,IAAA,CAAA,UAAA,iEAAA,SAAAL,EAAA,EAA+FK,EAAA,IAAA,IAAA,CAAA,UAAA,wEAAA,SAAAJ,EAAA,CACK,EAAA,CACtG,EAAA,EACFE,EAAAA,KAAA,MAAA,CAAA,UAAA,6DAAA,SAAA,CAGEE,EAAA,IAAA,KAAA,CAAA,UAAA,8FAAA,SAAAlC,EAAA,EAEAgC,EAAAA,KAAA,KAAA,CAAA,UAAA,gCAAA,SAAA,CAGEE,EAAA,IAAA,KAAA,CAAA,UAAA,gEAAA,SAAAH,GAAA,EAAA,EAAiGC,EAAAA,KAAA,KAAA,CAAA,UAAA,+DAAA,SAAA,CAE/FE,EAAAA,IAAAI,GAAA,CAAA,UAAA,4CAAA,CAAA,EAAmElC,EAAAE,EAAA,KAAAD,EAAAE,CACF,EAAA,CACnE,EAAA,EACF2B,MAAA,MAAA,CAAA,UAAA,UAAA,UAAAK,EAAA/B,GAAA,YAAAA,EAAA,WAAA,YAAA+B,EAAA,IAAAC,GAAAN,EAAAA,IAAAO,GAAA,CAAA,SAAAD,EAAA,IAAA,EAAAA,EAAA,EAAA,GAAA,CAMA,EAAA,EACFN,EAAAA,IAAA,MAAA,CAAA,UAAA,iCAAA,SAAAA,EAAA,IAGEQ,GAAC,CAAA,UAAA,sEACW,cAAA,MACE,CAAA,EAAA,CAEhB,CAAA,CAAA,CAAA,CAAA,CAIR;;;;;;;;;;;;"}